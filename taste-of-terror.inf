!% -~S
!% $OMIT_UNUSED_ROUTINES=1
!% $ZCODE_LESS_DICT_DATA=1
!% $MAX_ABBREVS=96
!========================================
! A Taste of Terror
! Sean MacDonald series #1 of 1
! Copyright Â© 2025 Garry Francis
!========================================
!Constant DEBUG;

Abbreviate "ou'll have to ";                !    15x15, saved   180
Abbreviate "hooded people";                 !    13x13, saved   128
Abbreviate "Aunt Clarissa";                 !    24x15, saved   297
Abbreviate " to the south";                 !    31x13, saved   326
Abbreviate "in front of";                   !    11x11, saved    87
Abbreviate "Uncle Bill";                    !    14x12, saved   128
Abbreviate "(with the ";                    !    18x11, saved   150
Abbreviate "currently ";                    !    19x10, saved   140
Abbreviate "holy water";                    !    17x10, saved   124
Abbreviate "You can't ";                    !    60x12, saved   588
Abbreviate "Esmeralda";                     !    21x10, saved   156
Abbreviate " continue";                     !    16x 9, saved   103
Abbreviate "our aunt";                      !    37x 8, saved   213
Abbreviate "trapdoor";                      !    24x 8, saved   135
Abbreviate " you're ";                      !    30x 9, saved   201
Abbreviate " in the ";                      !    75x 8, saved   441
Abbreviate " of the ";                      !    82x 8, saved   483
Abbreviate " through";                      !    22x 8, saved   123
Abbreviate "kerosene";                      !    18x 8, saved    99
Abbreviate " on the ";                      !    57x 8, saved   333
Abbreviate " to the ";                      !   126x 8, saved   747
Abbreviate "already ";                      !    35x 8, saved   201
Abbreviate "It's a ";                       !    58x 9, saved   397
Abbreviate "You're ";                       !    65x 9, saved   446
Abbreviate "window";                        !    44x 6, saved   170
Abbreviate " your ";                        !   100x 6, saved   394
Abbreviate ", but ";                        !    89x 7, saved   436
Abbreviate "don't ";                        !    49x 7, saved   236
Abbreviate " about";                        !    38x 6, saved   146
Abbreviate " the ";                         !   580x 5, saved  1734
Abbreviate "witch";                         !    71x 5, saved   207
Abbreviate " some";                         !    60x 5, saved   174
Abbreviate "spell";                         !    51x 5, saved   147
Abbreviate "house";                         !    36x 5, saved   102
Abbreviate "This ";                         !    34x 6, saved   130
Abbreviate "round";                         !    63x 5, saved   183
Abbreviate " are ";                         !    61x 5, saved   177
Abbreviate " from";                         !    79x 5, saved   231
Abbreviate "crypt";                         !    32x 5, saved    90
Abbreviate "thing";                         !   131x 5, saved   387
Abbreviate " you ";                         !   251x 5, saved   747
Abbreviate " with";                         !   103x 5, saved   303
Abbreviate " that";                         !   163x 5, saved   483
Abbreviate " and ";                         !   218x 5, saved   648
Abbreviate "It's ";                         !    96x 7, saved   471
Abbreviate "north";                         !    51x 5, saved   147
Abbreviate "have ";                         !    62x 5, saved   180
Abbreviate " like";                         !    50x 5, saved   144
Abbreviate ". The";                         !    86x 7, saved   421
Abbreviate "close";                         !    40x 5, saved   114
Abbreviate "ould ";                         !    41x 5, saved   117
Abbreviate " of ";                          !   151x 4, saved   296
Abbreviate "That";                          !    44x 5, saved   126
Abbreviate "here";                          !   128x 4, saved   250
Abbreviate " is ";                          !   149x 4, saved   292
Abbreviate "back";                          !    47x 4, saved    88
Abbreviate "The ";                          !   106x 5, saved   312
Abbreviate "n't ";                          !    87x 5, saved   255
Abbreviate "ing ";                          !   199x 4, saved   392
Abbreviate " to ";                          !   316x 4, saved   626
Abbreviate "lock";                          !    63x 4, saved   120
Abbreviate "You ";                          !   212x 5, saved   630
Abbreviate " you";                          !   102x 4, saved   198
Abbreviate "east";                          !    52x 4, saved    98
Abbreviate "side";                          !    71x 4, saved   136
Abbreviate " for";                          !    83x 4, saved   160
Abbreviate "ight";                          !    73x 4, saved   140
Abbreviate "tion";                          !    94x 4, saved   182
Abbreviate "can ";                          !    73x 4, saved   140
Abbreviate ".^* ";                          !    23x 9, saved   152
Abbreviate "not ";                          !    61x 4, saved   116
Abbreviate "est";                           !   117x 3, saved   114
Abbreviate "ing";                           !   157x 3, saved   154
Abbreviate " on";                           !    99x 3, saved    96
Abbreviate "ter";                           !   119x 3, saved   116
Abbreviate "out";                           !    92x 3, saved    89
Abbreviate "ain";                           !   123x 3, saved   120
Abbreviate " it";                           !   174x 3, saved   171
Abbreviate "ill";                           !    94x 3, saved    91
Abbreviate "'s ";                           !   211x 4, saved   416
Abbreviate " a ";                           !   259x 3, saved   256
Abbreviate " in";                           !   215x 3, saved   212
Abbreviate "ead";                           !   106x 3, saved   103
Abbreviate "re ";                           !    86x 3, saved    83
Abbreviate "ent";                           !    96x 3, saved    93
Abbreviate "ver";                           !   125x 3, saved   122
Abbreviate "and";                           !   125x 3, saved   122
Abbreviate "ed ";                           !   132x 3, saved   129
Abbreviate ".^^";                           !    28x 6, saved   106
Abbreviate "loo";                           !    96x 3, saved    93
Abbreviate "all";                           !   119x 3, saved   116
Abbreviate "the";                           !   188x 3, saved   185
Abbreviate ". I";                           !    63x 5, saved   183
Abbreviate ", ";                            !   317x 3, saved   314
Abbreviate ". ";                            !   368x 3, saved   365
Abbreviate ".~";                            !    62x 4, saved   118

Constant Story "A Taste of Terror";
Constant Headline "^Copyright (c) 2025 Garry Francis^https://warrigal.itch.io^Type ABOUT for further info and credits.^^";

Array UUID_ARRAY string "UUID://7f057a9f-88db-42d8-a670-caf7854047ae//";
#Ifdef UUID_ARRAY;
#Endif;

Release 1;
Serial "250630";

!Inform 6 constants
Constant AMUSING_PROVIDED;
Constant DEATH_MENTION_UNDO;
Constant MAX_CARRIED = 10;
Constant NO_SCORE;
Constant SACK_OBJECT = backpack;

!PunyInform constants
Constant CUSTOM_ABBREVIATIONS;
Constant MAX_FLOATING_OBJECTS 48; !PunyInform limit is 32, actual number is 41
Constant OPTIONAL_EXTENDED_METAVERBS;
Constant OPTIONAL_EXTENDED_VERBSET;
Constant OPTIONAL_FULL_DIRECTIONS;
Constant OPTIONAL_PRINT_SCENERY_CONTENTS;
Constant OPTIONAL_PROVIDE_UNDO;
Constant RUNTIME_ERRORS 0;!0 for release, 2 for debug

!PunyInform static messages
Constant MSG_ATTACK_DEFAULT "Use your brains, not your brawn, as you don't have much brawn to use.";
Constant MSG_COMMENT_NO_TRANSCRIPT "Comment recorded. Use SCRIPT ON to save future comments in a transcript.^";
Constant MSG_COMMENT_TRANSCRIPT "Comment recorded.^";
Constant MSG_JUMP "You jump on the spot like a silly ten-year-old, which is very appropriate really, because you are a silly ten-year-old.";
Constant MSG_LISTEN_DEFAULT "It's pretty quiet.";
Constant MSG_PARSER_NO_INPUT "You need to enter a command.";
Constant MSG_PARSER_UNKNOWN_VERB "That's not a verb I recognise.";
Constant MSG_PRAY_DEFAULT "You never paid much attention in Sunday school, so you don't know any prayers.";
Constant MSG_SING_DEFAULT "You start singing 'Your Move' by Yes. It's the only song you can think of with chess lyrics, but, oh my goodness, what a great song.";
Constant MSG_SORRY_DEFAULT "Oh, don't apologise.";
Constant MSG_TAKE_YOURSELF "You take yourself for a short walk, then return and drop yourself.";
Constant MSG_THINK_DEFAULT "Thinking reminds you of chess and you don't want to be reminded of chess, so you stop thinking.";
Constant MSG_WAIT_DEFAULT "Time passes...";

!PunyInform dynamic messages
Constant MSG_CLOSE_NOT_OPEN 1000;
Constant MSG_LOCK_ALREADY_LOCKED 1001;
Constant MSG_LOCK_CLOSE_FIRST 1002;
Constant MSG_LOCK_KEY_DOESNT_FIT 1003;
Constant MSG_UNLOCK_ALREADY_UNLOCKED 1004;
Constant MSG_UNLOCK_KEY_DOESNT_FIT 1005;

Constant MSG_TAKE_NO_CAPACITY 1006;
Constant MSG_NOW_DARK 1007;

!Game-specific constants
Constant ALREADY_DONE_THAT "You've already done that.";
Constant ALREADY_LOCKED "It's already locked.";
Constant AND_PULL_TRIGGER " and pull the trigger. BLAM! The recoil knocks you over";
Constant ASK_GYPSY_WOMAN_ABOUT "Find the gypsy woman and ask her about your ";
Constant AUNTS_BODY_TO_CLEANSE_SOUL "aunt's body to cleanse her soul.";
Constant BRAMBLES_PREVENT_YOU "The brambles prevent you going that way.";
Constant CANT_ATTACH_HEAD_TO_DEAD_BODY "It would take a feat of magic to reattach a head to a dead body.";
Constant CANT_BURN_IT_WITH "You can't burn it with ";
Constant CANT_CUT_BOLT_WITH "You can't cut the bolt with ";
Constant CANT_LOCK_IT_FROM_THIS_SIDE "You can't lock it from this side.";
Constant CANT_SHOOT_ANYTHING_WITH "You can't shoot anything with ";
Constant CANT_UNLOCK_FROM_THIS_SIDE "You can't unlock it from this side.";
Constant CLEANSED "completed step 1 of the spell. You need to cleanse your ";
Constant CLIMB_THROUGH_WINDOW "Climb through the window.";
Constant CLOSE_TRAPDOOR_FIRST "You'll have to close the trapdoor first.";
Constant DID_YOU_ASK_ABOUT_YOUR "Did you ask the gypsy woman about your ";
Constant DID_YOU_ASK_ABOUT_REST "? Did you ask her about the spell? Did you ask her about all the other interesting stuff she mentioned? Find the spell book!";
Constant DO_YOU_HAVE_USE_FOR_RAVENS "Do you have a use for ravens? You'll never catch one, but there are two ways to kill one.";
Constant DONE_NOTHING_TO_HARM_YOU " done nothing to harm you.";
Constant DONT_NEED_ANYTHING_TO_UNLOCK_IT "You don't need anything to unlock it. Just slide the bolt.";
Constant ESMERALDA_PEERS_INTO_CRYSTAL_BALL "Esmeralda peers into her crystal ball. ";
Constant EXAMINE_THE "Examine the ";
Constant FOLLOW_STEPS_IN_SPELL "Follow the steps in the relevant spell.";
Constant GET_INTO_BED "You get into the bed.";
Constant GET_OUT_OF_BED "You get out of the bed.";
Constant GYPSIES_NOT_HEAD_HUNTERS "~Where did you get that? We're gypsies, not head hunters. Take it away.~";
Constant HAIRY_OVERSIZED_PIG "It's like a hairy, oversized pig with tusks.";
Constant HARDLY_SEEMS_NECESSARY "That hardly seems necessary. As it's a sliding bolt, you can just slide it.";
Constant HEAR_DRIPPING_WATER "You hear the occasional dripping of water.";
Constant HOW_DO_YOU_PROPOSE_TO_DO_THAT "And how do you propose to do that?";
Constant IN_CASE_YOU_DIDNT_NOTICE "In case you didn't notice, ";
Constant ITS_A_GLASS_WINDOW "It's a glass window in a wooden frame. The window is currently ";
Constant ITS_A_SLIDING_BOLT "It's a sliding bolt that locks the trapdoor. It's currently in the ";
Constant ITS_A_TRAPDOOR "It's a trapdoor in the ";
Constant ITS_ALREADY_UNLOCKED "It's already unlocked.";
Constant ITS_NOT_FOR_DRINKING "It's meant for cleansing your soul, not for drinking.";
Constant ITS_ON_OTHER_SIDE_OF_WINDOW "It's on the other side of the window.";
Constant LADDER_IS_TOO_BIG_TO_PUT "The ladder is too big to put ";
Constant LOCKED_POSITION "locked position, but you only need to slide it to ";
Constant LOOK_IN_KITCHEN_CUPBOARD "Look in the kitchen cupboard.";
Constant MIGHT_COME_IN_HANDY " might come in handy.";
Constant MISSING_SOMETHING "You're missing something.";
Constant NOT_SURE_WHICH_DIRECTION_YOU_MEAN "I'm not sure which direction you mean. Try LOCK, UNLOCK or SLIDE.";
Constant NOT_WHILE_ITS_LIT "Not while it's lit!";
Constant NOTHING_TO_BURN_IT_WITH "You have nothing to burn it with.";
Constant NOTHING_TO_LIGHT_IT_WITH "You have nothing to light it with.";
Constant OPEN_IT_FROM_OTHER_SIDE "If the trapdoor is locked, you'll have to open it from the other side.";
Constant OPEN_THE "Open the ";
Constant SHOTGUN_NOT_LOADED "You pull the trigger, but nothing happens. Apparently, the shotgun's not loaded.";
Constant SLIDE_BOLT_TO_LOCK_TRAPDOOR "You slide the bolt to lock the trapdoor.";
Constant SLIDE_BOLT_TO_UNLOCK_TRAPDOOR "You slide the bolt to unlock the trapdoor.";
Constant SMELLS_MUSTY "It smells musty in here.";
Constant TOO_HEAVY_TO_MOVE "It's too heavy for you to move.";
Constant UNCLES_BODY_TO_CLEANSE_SOUL "uncle's body to cleanse his soul.";
Constant WHATS_BEHIND_THAT "I wonder what's behind that ";
Constant WHEN_YOU_LOOK_THROUGH_WINDOW ". When you look through the window, you can see ";
Constant WHY_DO_THAT "Why would you want to do that? ";
Constant WITCH_GOUGES_EYES_OUT "With inhuman speed, the witch pounces on you like a blood-thirsty beast and kills you by gouging your eyes out with her long finger nails.";
Constant WITH_BOLT_CUTTERS "(with the bolt cutters)^";
Constant WITH_CLAW_HAMMER "(with the claw hammer)^";
Constant WITH_LIT_MATCH "(with the lit match)^";
Constant WITH_LIT_TORCH "(with the lit torch)^";
Constant YOU_AIM_SHOTGUN_AT "You aim the shotgun at the ";
Constant YOU_CANT_OPEN_WINDOW "You can't open the window, so don't bother trying.";
Constant YOU_HAVENT "You pause for a moment. You haven't ";
Constant YOU_MIGHT_NEED "You have second thoughts, when you realise that you might need the ";
Constant YOU_NEED_AN_ACCELERANT "You need an accelerant, like petrol, kerosene, methylated spirits or something like that.";
Constant YOU_NEED_TO_ENTER_ROOM "You'll need to enter the room to see what's inside.";
Constant YOU_NEED_TO_GET_INSIDE "You need to get inside to see what's in there.";
Constant YOU_POUR_HOLY_WATER_OVER "You pour the holy water over your ";
Constant YOU_SMASH_GLASS "The glass smashes into a million pieces. (Well, maybe not quite that many, but you get the general idea.) You carefully break off the few remaining pieces around the window frame, so it should now be safe to climb through the window.";
Constant YOU_STEP_INTO "You push the curtain aside and step into the ";
Constant YOU_TAKE_MATCH "You take a match out of the matchbox";
Constant YOU_TURN_THE_PAGES "You turn the pages until you come to ";
Constant YOULL_HAVE_TO_EMPTY "You'll have to empty ";
Constant YOULL_HAVE_TO_TELL_ME_WHAT_TO "You'll have to tell me what to ";

!Replaced actions
Replace LockSub;
Replace UnlockSub;

Include "globals.h";

!Game-specific variables
Global start_count 14; !Initial count for player daemon
Global current_count 1; !Current count for player daemon

Property size 1;

!========================================
! Entry point routines
!========================================
[ Amusing;
  "^Have you tried:^* Examining everything in every room, including scenery and the rooms themselves.^* Using DANCE, JUMP, PRAY, SING, THINK and the magic word XYZZY.^* Removing your clothes.^* Reading the instructions on the packet of painkillers.^* Sliding down the handrail in the foyer.^* Putting the pins back in the doll.^* Opening your bedroom window.^* Jumping off the roof.^* Reading the books in the library.^* Standing on the armchair in the library or the pews in the chapel.^* Taking stuff from the lab, unlocking the lab trapdoor or leaving the lab before killing the witch.^* Killing the witch with the dagger, the pitchfork and the shotgun.^* Allowing the witch to kill you to hear everything she has to say.^* Drinking or smelling the yellow liquid in the alembic.^* Asking the gypsy man about the satisfaction survey.^* Asking Esmeralda about curses, potions, spells, the specific spells, circles, pentagrams, ravens, black and white witches, witches, warlocks, witchcraft, rituals, gypsies, the future, the satisfaction survey and the various things you've seen around the farm.^* Taking Esmeralda's crystal ball, the dead bodies, the hay in the barn or the leaves in the cabin.^* Giving the heads to any of the other characters.^* Cleaning the window of the abandoned farmhouse before and after breaking it.^* Throwing stuff at the ravens.^* Killing the ravens with the pitchfork and the shotgun.^* Shooting the boar before killing a raven.^* Climbing the ladder to avoid the boar.^* Attacking the guard at the crypt or asking him about anything when not wearing the hood.";
];

[ InScope person i;
  if (person == player && location == thedark)
    objectloop(i in real_location)
      if (i has moved)
        PlaceInScope(i);
  rfalse;
];

[ LibraryMessages p_msg p_arg_1 p_arg_2;
  switch (p_msg)
  {
    MSG_CLOSE_NOT_OPEN:
      print_ret (CTheyreOrIts)noun, " already closed.";
    MSG_LOCK_ALREADY_LOCKED:
      print_ret (CTheyreOrIts)noun, " already locked.";
    MSG_LOCK_CLOSE_FIRST:
      "You'll have to close ", (ItOrThem)noun, " first.";
    MSG_LOCK_KEY_DOESNT_FIT:
      print_ret (The)second, " ", (DoesntOrDont)second, " fit the lock.";
    MSG_UNLOCK_ALREADY_UNLOCKED:
      print_ret (CTheyreOrIts)noun, " already unlocked.";
    MSG_UNLOCK_KEY_DOESNT_FIT:
      print_ret (The)second, " ", (DoesntOrDont)second, " fit the lock.";
    MSG_TAKE_NO_CAPACITY:
      print "You're carrying too many things already. Perhaps you could put something in your backpack.";
      if (backpack in nothing)
        print " You left it under your bed.";
      "";
    MSG_NOW_DARK:
      rtrue;
  }
  p_arg_1 = p_arg_2;
];

Include "puny.h";

!========================================
! Initialisation
!========================================
[ Initialise;
  location = room01;
  lookmode = 2;
  move kimono to player;
  move sneakers to player;
  no_implicit_actions = true;
  player.daemon = PlayerDaemon;
  player.description = "Your name is Sean MacDonald. You're just ten years old and the Wigtown junior chess champion, but chess is the furthest thing from your mind at the moment, as you're on holidays at your Aunt Clarissa's farm.";
  Startdaemon(player);
  "^You were looking forward to a break from chess, and a holiday on Aunt Clarissa's farm was just what you needed.^^You may have been the county's youngest chess champion, but those long afternoons hanging around the Wigtown chess tables was not much fun for a ten-year-old. You would much rather be running around on your Aunt Clarissa's farm. Well, it used to be your Uncle Bill's farm, but Uncle Bill died under mysterious circumstances on the full moon just one month ago. Now Aunt Clarissa looks after the farm by herself.^^The train's whistle breaks you out of your reverie. As the brakes squeal, you quickly gather your backpack and get ready to alight at Forfar Station. Your Aunt Clarissa is there to greet you. Her wrinkled hand reaches out and she gives you an icy hug. ~How's my little Sean? Welcome back to Forfar!~^^Your aunt seems to have aged incredibly since you last saw her at Uncle Bill's funeral. She just doesn't look her normal sprightly self. Her voice is raspy, her skin looks more flabby than usual and she seems to have grown a hooked nose. Uncle Bill's death must have hit her hard, poor thing.^^After a short taxi ride through the Sidlaw Hills, you soon reach the farm.^^The following day, you go wild jumping in the barn, running through the fields and exploring the hills. Chess is soon a distant memory. Everything is perfect, yet something bothers you about Aunt Clarissa.^^When you go to bed that night, you can't get to sleep due to a pain in your back. You guess you must have torn a muscle or something with all the running around, so you tip-toe down to the kitchen to see if you can find a painkiller...^";
];

!========================================
! Classes
!========================================
Class Body
with
  life
  [;
    print_ret (string)IN_CASE_YOU_DIDNT_NOTICE, "it's a DEAD body!";
  ],
  before
  [;
    Shoot:
      if (TestScope(shotgun))
      {
        print (string)IN_CASE_YOU_DIDNT_NOTICE;
        if (self has female)
          print "s";
        "he's already dead.";
      }
    Take:
      "You're only a scrawny ten-year-old. You can't carry around dead bodies.";
  ],
has animate female;

Class Liquid
with
  before
  [;
    Pour:
      if (parent(self) notin player)
      {
        print "(first taking ", (the)parent(self), ")^";
        move parent(self) to player;
      }
      if (parent(self) has container)
        <<Empty (parent(self))>>;
    Insert, PourT:
      if (second == parent(self))
        "The ", (name)self, " is already in ", (the)second, ".";
      if (second in player)
      {
        print "(first dropping ", (the)second, ")^";
        move second to location;
      }
      if (parent(self) notin player)
      {
        print "(first taking ", (the)parent(self), ")^";
        move parent(self) to player;
      }
      if (second has container)
        <<EmptyT (parent(self)) second>>;
    Take:
      print "You can't take ", (the)noun, " out of ", (the)parent(self), ", but you could ";
      if (parent(self) has scenery or static)
        "put it in a container.";
      else
        "pour it out or pour it onto something.";
  ],
has;

Class ContainerForLiquids
with
  invent
  [;
    if (inventory_stage == 2 && (self hasnt transparent || child(self) == 0))
      rtrue;
  ],
  before
  [;
    Empty:
      if (child(self) == 0)
        print_ret (The)self, " is already empty.";
      noun = child(self);
      remove noun;
      "You empty ", (the)self, " and ", (the)noun, " soaks into the ground.";
    EmptyT:
      if (noun == second)
        "You can't empty ", (the)self, " into itself.";
      if (child(self) == 0)
        print_ret (The)self, " is already empt
        y.";
      if (child(second) ~= 0)
        print_ret (string)YOULL_HAVE_TO_EMPTY, (the)second, " first.";
      if (second in player)
      {
        print "(first dropping ", (the)second, ")^";
        move second to location;
      }
      if (self notin player)
      {
        print "(first getting ", (the)self, ")^";
        move self to player;
      }
      move child(self) to second;
      "You empty ", (the)self, " onto ", (the)second, ".";
    Fill:
      if (child(self) ~= 0)
        print_ret (The)self, " already has something in it.";
      if (second == nothing)
        print_ret (string)YOULL_HAVE_TO_TELL_ME_WHAT_TO, "fill it with.";
      if (second ofclass Liquid && TestScope(second))
        <<EmptyT (parent(second)) self>>;
      if (second == bulk_water)
        <<Take second self>>;
      "You can only fill ", (the)self, " with liquids.";
  ],
has container open;

Class OpenableContainer
with
  invent
  [;
    if (inventory_stage == 2 && (self hasnt open || child(self) == 0))
      rtrue;
  ],
  before
  [;
    Receive:
      if (noun.size >= self.size)
        print_ret (The)noun, " won't fit in ", (the)self, ".";
  ],
has container openable;

Class OpenContainer
with
  invent
  [;
    if (inventory_stage == 2 && child(self) == 0)
      rtrue;
  ],
  before
  [;
    Receive:
      if (noun.size >= self.size)
        print_ret (The)noun, " won't fit in ", (the)self, ".";
  ],
has container open;

Class Surface
with
  invent
  [;
    if (inventory_stage == 2 && child(self) == 0)
      rtrue;
  ],
  before
  [;
    Receive:
      if (noun.size >= self.size)
        print_ret (The)noun, " won't fit on ", (the)self, ".";
  ],
has supporter;

!========================================
! Inventory
!========================================
!----------------------------------------
! Sneakers
!----------------------------------------
Object sneakers "sneakers"
with
  article "a pair of",
  name 'sneakers' 'favourite' 'favorite' 'pair' 'of' 'shoes',
  description "It's your favourite pair of sneakers. They're very appropriately named, as they're great for sneaking up on people, except that they squeak on wooden floors.",
  size 5,
has clothing pluralname worn;

!----------------------------------------
! Judo kimono (aka judogi)
!----------------------------------------
Object kimono "judo kimono"
with
  article "your",
  name 'judo' 'kimono' 'judogi' 'clothes' 'clothing',
  description "It's a judo kimono, also known as a 'judogi'. This is your favourite clothing and you wear it everywhere when you're at Aunt Clarissa's, as it allows you plenty of free movement as you run around and play on the farm.",
  before
  [;
    Disrobe:
      "You're a bit too shy to run around naked, so you decide to leave your clothes on.";
  ],
has clothing worn;

!========================================
! Room 1: Kitchen
!========================================
Object room01 "Kitchen"
with
  description
  [;
    print "You're in the kitchen. There's nothing here apart from the usual kitchen stuff and you have no interest in that. ";
    if (pins in doll && cupboard hasnt general)
      print "You're only interested in painkillers and they're likely to be locked away. ";
    "There's a pantry door to the east. Otherwise, you can leave the kitchen to the west.";
  ],
  e_to pantry_door,
  w_to room02,
  in_to pantry_door,
  after
  [;
    Hint:
      if (cupboard hasnt general)
        print_ret (string)OPEN_THE, "cupboard.";
      if (matchbox hasnt moved)
        "That matchbox", (string)MIGHT_COME_IN_HANDY;
      if (trunk hasnt general)
        print_ret (string)OPEN_THE, "trunk.";
      if (jug hasnt moved)
        "That jug", (string)MIGHT_COME_IN_HANDY;
      if (rusty_key in jug)
        "What's that rattling in the jug? Turn it over or empty it.";
      if (dagger hasnt moved)
        "That dagger", (string)MIGHT_COME_IN_HANDY;
      if (small_key hasnt moved)
        "Find the key to the pantry.";
      if (pantry_door hasnt general)
        print_ret (string)OPEN_THE, "pantry door.";
  ],
has light;

!----------------------------------------
! House (floating object)
!----------------------------------------
Object "house" room01
with
  name 'house',
  description "It's your Aunt Clarissa's house and you're a guest here.",
  found_in room01 room02 room03 room04 room05 room06 room07 room08 room09 room10 room11 room12 room13 room14 room15 room16 room17,
has scenery;

!----------------------------------------
! Kitchen
!----------------------------------------
Object "kitchen" room01
with
  name 'kitchen' 'modest' 'country-style' 'country' 'style',
  description "It's a modest, country-style kitchen with a large sink, benches and lots of cooking pots and pans.",
has scenery;

!----------------------------------------
! Paraphernalia
!----------------------------------------
Object "paraphernalia" room01
with
  article "some",
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'kitchen' or 'stuff' or 'paraphernalia' or 'large' or 'sink' or 'bench' or 'benches' or 'cooking' or 'pot' or 'pots' or 'pan' or 'pans')
    {
      i++;
      if (nw == 'kitchen')
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description "You have no interest in all the kitchen paraphernalia. You're not here to start cooking a meal or do the washing up.",
has scenery;

!----------------------------------------
! Trunk
!----------------------------------------
Object trunk "trunk" room01
class OpenableContainer
with
  name 'trunk' 'old' 'metal',
  description
  [;
    print "It's an old metal trunk. A trunk is normally used for travelling, so you have no idea why it's in the kitchen. ";
    <<Search self>>;
  ],
  before
  [;
    Pull, Push, Take:
      print_ret (string)TOO_HEAVY_TO_MOVE;
  ],
  after
  [;
    Open:
      give self general;
  ],
  size 10,
has container openable static;

!----------------------------------------
! Jug
!----------------------------------------
Object jug "jug" trunk
class ContainerForLiquids
with
  name 'jug' 'clay' 'narrow' 'neck' 'opaque',
  description "It's a clay jug with a very narrow neck. As it's opaque, you can't see what's inside.",
  before
  [;
    Attack:
      "You'd best not. You never know, but you might need it later.";
    Empty, Turn:
      if (self notin player)
      {
        print "(first taking the jug)^";
        move self to player;
      }
      if (rusty_key in self)
      {
        move rusty_key to location;
        "When you turn the jug upside down, something falls out.";
      }
    EmptyT:
      if (child(self) == 0)
        "There's nothing in the jug to pour out.";
      if (rusty_key in self)
        <<Empty self>>;
      if (second == stoup)
      {
        remove water;
        "You pour the holy water back into the stoup.";
      }
      if (second ~= uncles_body or aunts_body)
      {
        print "That holy water is precious. Don't waste it by pouring it ";
        if (second has container)
          print "into ";
        else
          print "onto ";
        print_ret (the)second, ".";
      }
      if (second == uncles_body && uncles_body in location)
      {
        if (uncles_body has general)
          print_ret (string)ALREADY_DONE_THAT;
        give uncles_body general;
        print_ret (string)YOU_POUR_HOLY_WATER_OVER, (string)UNCLES_BODY_TO_CLEANSE_SOUL;
      }
      if (second == aunts_body && aunts_body in location)
      {
        if (aunts_body has general)
          print_ret (string)ALREADY_DONE_THAT;
        give aunts_body general;
        print_ret (string)YOU_POUR_HOLY_WATER_OVER, (string)AUNTS_BODY_TO_CLEANSE_SOUL;
      }
    Fill:
      if (second == nothing && TestScope(bulk_water))
      {
        print "(with the holy water)^";
        <<Take bulk_water self>>;
      }
      if (second == nothing && TestScope(stream_water))
      {
        print "(with the stream water)^";
        <<Take stream_water self>>;
      }
    Receive:
      if (noun ~= rusty_key)
        "The neck of the jug is very narrow, so you shouldn't try stuffing things into it or you might never get them out again.";
    Search:
      "You can't see through the jug, as it's made of clay.";
    Wave:
      if (child(self) == 0)
        "It's empty.";
      print "There's something ";
      if (rusty_key in self)
        print "rattling";
      else
        print "splooshing";
      " around inside.";
  ],
  after
  [;
    Take:
      if (child(self) ~= 0)
      {
        print "You hear something ";
        if (rusty_key in self)
          print "rattling";
        else
          print "splooshing";
        " inside the jug when you pick it up.";
      }
  ],
  size 6,
has container open;

!----------------------------------------
! Rusty key
!----------------------------------------
Object rusty_key "rusty key" jug
with
  name 'rusty' 'key',
  description
  [;
    if (self in jug)
    {
      PrintMsg(MSG_PARSER_NOSUCHTHING);
      rtrue;
    }
    print "It looks like the key to a padlock";
    if (self has general)
      print ", though you now know that it's the key to the gate at the east crypt";
    ".";
  ],
  before
  [;
    Take:
      if (self in jug)
        "You can't fit your hand in the jug.";
  ],
  size 3,
has;

!----------------------------------------
! Dagger
!----------------------------------------
Object dagger "dagger" trunk
with
  name 'dagger',
  description "It has a handle carved in the shape of a serpent.",
  add_to_scope handle,
  size 3,
has;

!----------------------------------------
! Handle
!----------------------------------------
Object handle "handle"
with
  name 'handle' 'serpent' 'intricate' 'carving',
  description "The intricate carving on the handle looks like fine workmanship, so whoever did it is probably a master craftsman.",
has scenery;

!----------------------------------------
! Cupboard
!----------------------------------------
Object cupboard "cupboard" room01
class OpenableContainer
with
  name 'cupboard' 'shabby' 'piece' 'of' 'furniture',
  description
  [;
    print "It's the most shabby piece of furniture in the kitchen. ";
    <<Search self>>;
  ],
  after
  [;
    Open:
      give self general;
  ],
  size 12,
has container openable static;

!----------------------------------------
! Painkillers
!----------------------------------------
Object packet "packet of painkillers" cupboard
class OpenableContainer
with
  !Note that painkiller & painkillers are the same due to 9-character limit
  name 'packet' 'of' 'painkillers' 'tablets' 'no' 'more' 'pain' 'instructions',
  description
  [;
    print "It's a packet of 'No More Pain' painkillers. ";
    if (self hasnt general)
      print "You should read the instructions on the packet before taking any. ";
    <<Search self>>;
  ],
  before
  [;
    Eat:
      print "You can't eat the packet.";
      if (self hasnt open)
        print " Try opening it.";
      "";
    Read:
      give self general;
      print "You flip the packet over and read the instructions on the back.^^'No More Pain is a safe and effective treatment for the temporary relief of many forms of acute pain including headache, toothache, back pain, period pain, minor sprains and injuries. Safe for children. See the enclosed leaflet for further information.^^Directions for use: Take one chewable tablet for instant pain relief. Repeat if necessary every 4 hours. See your doctor if pain persists.'";
      if (self has open)
        print "^^The enclosed leaflet is no longer enclosed. It was probably thrown out long ago.";
      "";
  ],
  size 2,
has container openable;

!----------------------------------------
! Chewable tablet
!----------------------------------------
Object tablet "chewable tablet" packet
with
  name 'chewable' 'tablet' 'bright' 'green' 'gummy',
  description "It's a bright green tablet that you chew, rather than swallow. To be quite honest, it looks more like a lolly than a tablet, but you really don't care so long as it works.",
  before
  [;
    Take:
      if (verb_word == 'take' && self in player)
        <<Eat self>>;
  ],
  after
  [;
    Eat:
      if (pins notin doll)
        "Your back pain is gone, so you don't need it any more.";
      "You chew the tablet expecting instant pain relief, but nothing happens. Either the claims on the packet are false or the cause of your back pain is somehow different to the ones described on the packet.";
  ],
  size 1,
has edible;

!----------------------------------------
! Matchbox
!----------------------------------------
Object matchbox "matchbox" cupboard
class OpenContainer
with
  name 'matchbox' 'box' 'of' 'matches',
  description "It's a box of matches.",
  before
  [;
    Count:
      "There are plenty of matches in the matchbox. There's no need to count them.";
    Open:
      "There's no need to open it first. If you want a match, just TAKE MATCH or LIGHT MATCH and I'll open and close the matchbox for you.";
    Receive:
      if (noun ~= match)
        "You can't put anything in the matchbox, other than matches.";
    Search:
      "It's full of matches.";
  ],
  add_to_scope dummy_match,
  size 2,
has container open;

!----------------------------------------
! Dummy match
!----------------------------------------
Object dummy_match "match"
with
  parse_name
  [ i;
    if (TestScope(match))
      return 0;
    while (NextWord() == 'safety' or 'match')
      i++;
    return i;
  ],
  description "You can't see the matches while they're in the matchbox. Why not take one?",
  before
  [;
    Burn:
      if (match notin nothing)
        "Use the one you've already taken.";
      move match to player;
      PronounNotice(match);
      give match light;
      StartTimer(match, 4);
      print (string)YOU_TAKE_MATCH, " and light it.^";
      if (location == thedark)
      {
        new_line;
        PlayerTo(real_location, 2);
      }
      rtrue;
    Take:
      if (match notin nothing)
        "You've already taken one.";
      move match to player;
      PronounNotice(match);
      print_ret (string)YOU_TAKE_MATCH, ".";
  ],
has scenery;

!----------------------------------------
! Match
!----------------------------------------
Object match "match"
with
  name 'safety' 'match',
  description
  [;
    print "It's a";
    if (self hasnt light)
      print "n unlit";
    print " safety match";
    if (self has light)
      print " that burns with a flickering flame, but the flame won't last long";
    ".";
  ],
  before
  [;
    Burn:
      if (self has light)
        "It's already lit.";
      if (self notin player)
        "You're not holding it.";
      if (matchbox notin player)
        "You need the matchbox to light it.";
      give self light;
      StartTimer(self, 4);
      print "You light the match, but it won't last very long.^";
      if (location == thedark)
      {
        new_line;
        PlayerTo(real_location, 2);
      }
      rtrue;
    Extinguish:
      if (self hasnt light)
        "It's not lit.";
      give self ~light;
      remove self;
      StopTimer(self);
      print "You blow out the match and throw it away.^";
      if (real_location hasnt light && ~~(TestScope(torch) && torch has light))
      {
        new_line;
        PlayerTo(location, 2);
      }
      rtrue;
    Insert, PutOn:
      if (self has light)
        print_ret (string)NOT_WHILE_ITS_LIT;
      if (second == matchbox)
      {
        remove self;
        "You put the match back in the matchbox.";
      }
  ],
  time_out
  [;
    if (TestScope(self))
      print "^The match goes out.^";
    give self ~light;
    remove self;
    if (real_location hasnt light && ~~(TestScope(torch) && torch has light))
    {
      new_line;
      PlayerTo(location, 2);
    }
    rtrue;
  ],
  time_left,
  size 1,
has;

!----------------------------------------
! Pantry door (floating object)
!----------------------------------------
Object pantry_door "door"
with
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'pantry' or 'door')
    {
      i++;
      if (nw == 'pantry' && self in room15)
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description
  [;
    print "It's the door to the pantry. It's currently ";
    if (self has open)
      "open.";
    else
      "closed.";
  ],
  door_dir
  [;
    if (self in room01)
      return e_to;
    else
      return w_to;
  ],
  door_to
  [;
    if (self in room01)
      return room15;
    else
      return room01;
  ],
  before
  [;
    Lock:
      if (self in room15)
        "You can't lock it fom this side. The lock is on the other side of the door.";
  ],
  after
  [;
    Open:
      give self general;
    Unlock:
      give small_key general;
  ],
  with_key small_key,
  found_in room01 room15,
has door lockable locked openable scenery;

!========================================
! Room 2: Foyer
!========================================
Object room02 "Foyer"
with
  description "This is the foyer, which is a fancy way of saying it's a short hallway at the entrance of the house. The hallway runs east to west and a staircase goes up to the first floor. If you want to leave the house, the front door is to the south.",
  s_to front_door,
  e_to room01,
  w_to room14,
  u_to room03,
  in_to room14,
  out_to front_door,
  after
  [;
    Hint:
      if (front_door hasnt open)
        print_ret (string)OPEN_THE, "front door if you want to go exploring outside.";
  ],
has light;

!----------------------------------------
! Foyer
!----------------------------------------
Object "foyer" room02
with
  name 'foyer' 'entrance',
  description "This is the first room you step into when you enter the house. And heaven forbid if you forget to wipe your feet before coming in. That would cause Aunt Clarissa to get really mad.",
has scenery;

!----------------------------------------
! Hallway
!----------------------------------------
Object "hallway" room02
with
  name 'hall' 'hallway',
  description "This is the ground floor hallway. It runs from east to west with a staircase going up to the next floor.",
has scenery;

!----------------------------------------
! Staircase in house (floating object)
!----------------------------------------
Object "staircase"
with
  name 'staircase' 'stairway' 'stairs' 'wood' 'wooden',
  description
  [;
    print "It's a wooden staircase with a handrail on each side. The staircase goes ";
    if (self in room02)
      "up to the first floor.";
    else
      "down to the ground floor.";
  ],
  before
  [;
    Climb, Enter:
      if (self in room03)
        <<Go FAKE_D_OBJ>>;
      else
        <<Go FAKE_U_OBJ>>;
  ],
  found_in room02 room03,
has scenery;

!----------------------------------------
! Handrail (floating object)
!----------------------------------------
Object "handrail"
with
  name 'handrail' 'handrails' 'rail' 'rails' 'railing',
  description "There's a handrail on each side of the stairs. When you were little, you used to have great fun sliding down the handrails until you got a splinter in your bottom and a doctor had to remove it. That was embarrassing.",
  before
  [;
    Enter:
      if (self in room02)
        "You'll have to climb the stairs if you want to slide down the handrail.";
      if (verb_word == 'lie' or 'stand')
        "Try sitting on it.";
      print "You sit on the handrail and slide down to the bottom. Whee! That was fun. It brings back childhood memories. Fortunately, you didn't get a splinter in your bottom like you did the last time you tried that.^^";
      <<Go FAKE_D_OBJ>>;
  ],
  found_in room02 room03,
has scenery;

!----------------------------------------
! Front door (floating object)
!----------------------------------------
Object front_door "front door"
with
  name 'front' 'door' 'painted' 'wooden' 'panels' 'small' 'oval' 'frosted-glass' 'frosted' 'glass' 'window',
  description
  [;
    print "It's the front door to the house. It consists of painted wooden panels with a small oval, frosted-glass window. The door is currently ";
    if (self has open)
      "open.";
    else
      "closed.";
  ],
  door_dir
  [;
    if (self in room02)
      return s_to;
    else
      return n_to;
  ],
  door_to
  [;
    if (self in room02)
      return room18;
    else
      return room02;
  ],
  found_in room02 room18,
has door openable scenery;

!========================================
! Room 3: Top of Staircase
!========================================
Object room03 "Top of Staircase"
with
  description "You're at the top of a staircase on the first floor of the house. It's roughly midway along a hallway that runs from east to west. There's also a curtain to the north. You can go back down the staircase to the ground floor.",
  n_to
  [;
    if (curtain hasnt open)
      print (string)YOU_STEP_INTO, "dark.^^";
    return room05;
  ],
  e_to room06,
  w_to room04,
  d_to room02,
  in_to curtain,
  after
  [;
    Hint:
      if (room05 hasnt visited)
        print_ret (string)WHATS_BEHIND_THAT, "curtain?";
  ],
has light;

!----------------------------------------
! Hallway (floating object)
!----------------------------------------
Object "hallway"
with
  name 'hall' 'hallway',
  found_in room03 room04 room06 room08,
has scenery;

!----------------------------------------
! Curtain (floating object)
!----------------------------------------
Object curtain "curtain"
with
  name 'curtain' 'heavy' 'velvet-like' 'velvet' 'fabric',
  description
  [;
    print "The curtain is made of a heavy velvet-like fabric. It's currently ";
    if (self has open)
      "open.";
    else
      "closed.";
  ],
  door_dir
  [;
    if (self in room03)
      return n_to;
    else
      return s_to;
  ],
  door_to
  [;
    if (self in room03)
      return room05;
    else
      return room03;
  ],
  after
  [;
    Open:
      give room05 light;
      if (self in room05)
      {
        print "When you open the curtain, the light streams in from the hallway.^";
        if (location == thedark)
        {
          new_line;
          PlayerTo(real_location, 2);
        }
        rtrue;
      }
    Close:
      give room05 ~light;
      if (self in room05)
      {
        print "When you close the curtain, the room goes darker.^";
        if (~~(TestScope(match) && match has light) && ~~(TestScope(torch) && torch has light))
        {
          new_line;
          PlayerTo(location, 2);
        }
        rtrue;
      }
  ],
  found_in room03 room05,
has door moved openable scenery;

!========================================
! Room 4: West End of Hallway
!========================================
Object room04 "West End of Hallway"
with
  description "You're at the western end of the hallway in front of Aunt Clarissa's bedroom. The door to her room is to the north and the hallway goes back to the east.",
  n_to bedroom_door,
  e_to room03,
  in_to bedroom_door,
  after
  [;
    Hint:
      if (room13 hasnt visited && bedroom_door hasnt general)
        print_ret (string)OPEN_THE, "door.";
      if (room13 hasnt visited)
        "If the door is locked, you'll have to find another way in.";
  ],
has light;

!----------------------------------------
! Aunt's room
!----------------------------------------
Object "Aunt's room" room04
with
  article "your",
  name 'aunt' 'aunt^s' 'clarissa' 'clarissa^s' 'room' 'bedroom',
  description YOU_NEED_TO_ENTER_ROOM,
  before
  [;
    Enter:
      <<Go FAKE_N_OBJ>>;
  ],
has scenery;

!----------------------------------------
! Bedroom door
!----------------------------------------
Object bedroom_door "door"
with
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'bedroom' or 'door')
    {
      i++;
      if (nw == 'bedroom' && self in room13)
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description
  [;
    print "This is the door to ";
    if (self in room04)
      print "your aunt's bedroom";
    else
      print "the hallway";
    ". It's currently closed.";
  ],
  door_dir
  [;
    if (self in room04)
      return n_to;
    else
      return s_to;
  ],
  door_to
  [;
    if (self in room04)
      return room13;
    else
      return room04;
  ],
  before
  [;
    Attack:
      "You bang on the door, but there's no response.";
    Open:
      give self general;
  ],
  with_key dummy_key,
  found_in room04 room13,
has door lockable locked openable scenery;

!========================================
! Room 5: Storage Room
!========================================
Object room05 "Storage Room"
with
  description "You're in a dark storage room on the north side of the house. Your aunt and uncle led a very frugal lifestyle, so there's not much stored in here. The exit is through the curtain to the south.",
  s_to
  [;
    if (curtain hasnt open)
      print (string)YOU_STEP_INTO, "light.^^";
    return room03;
  ],
  out_to curtain,
  before
  [;
    Smell:
      print_ret (string)SMELLS_MUSTY;
  ],
  after
  [;
    Hint:
      if (ladder hasnt moved)
        "That ladder", (string)MIGHT_COME_IN_HANDY;
  ],
has;

!----------------------------------------
! Storage room
!----------------------------------------
Object "storage room" room05
with
  name 'storage' 'room',
  description "The storage room is pretty dusty, as it doesn't get used much.",
has scenery;

!----------------------------------------
! Dust (floating object)
!----------------------------------------
Object "dust"
with
  name 'dust',
  description "It's just your ordinary, everyday household dust that you'll find anywhere that hasn't been cleaned recently.",
  found_in room05 room07 room09,
has scenery;

!----------------------------------------
! Ladder
!----------------------------------------
Object ladder "ladder" room05
class Surface
with
  name 'ladder',
  description
  [;
    print "It's a folding step ladder. It's currently ";
    if (self in player)
      "closed and cradled under your arm.";
    print "open and standing on the floor";
    if (player in self)
      print " and you're standing on it";
    ".";
  ],
  react_before
  [;
    Drop:
      if (player in self && noun in player && noun hasnt worn)
      {
        move noun to real_location;
        print (The)noun, " fall";
        if (noun hasnt pluralname)
          print "s";
        print_ret " to the floor.";
      }
    Enter:
      if (noun ~= nothing && self in player)
        "You'll have to drop the ladder first.";
    Take:
      if (player in self && noun in location && noun hasnt scenery or static)
        "You can't reach ", (the)noun, " while you're standing on the ladder.";
  ],
  before
  [;
    Climb:
      if (player in self)
        <<Exit self>>;
      else
        <<Enter self>>;
    Go:
      if (selected_direction == u_to)
      {
        if (location == room08)
          if (attic_trapdoor hasnt open)
          {
            print "You'll have to open the trapdoor first.^";
            return 2;
          }
          else
          {
            print "You clamber through the trapdoor.^^";
            PlayerTo(room09, 2);
            return 2;
          }
        print "You can't climb any higher.^";
        return 2;
      }
      if (selected_direction == d_to)
      {
        <Exit self>;
        return 2;
      }
      print "You'll have to get off the ladder first.^";
      return 2;
    Insert:
      print_ret (string)LADDER_IS_TOO_BIG_TO_PUT, "in ", (the)second, ".";
    PutOn:
      print_ret (string)LADDER_IS_TOO_BIG_TO_PUT, "on ", (the)second, ".";
    Receive:
      "The steps are too narrow to put things on the ladder.";
  ],
  after
  [;
    Drop:
      "You unfold the ladder and stand it on the ground.";
    Enter:
      "You climb onto the ladder.";
    Exit:
      "You get off the ladder.";
    Take:
      "You fold the ladder and tuck it under your arm. It's a bit awkward to carry, so you hope you don't have to lug it very far.";
  ],
  size 13,
has enterable supporter;

!========================================
! Room 6: Hallway
!========================================
Object room06 "Hallway"
with
  description "You're in the hallway in front of the guest room to the north. The guest room is currently your bedroom, as you're the guest. The hallway continues to the west and ends a short distance to the east.",
  n_to room07,
  e_to room08,
  w_to room03,
  in_to room07,
has light;

!----------------------------------------
! Guest room
!----------------------------------------
Object "guest room" room06
with
  name 'guest' 'room' 'your' 'bedroom',
  description YOU_NEED_TO_ENTER_ROOM,
  before
  [;
    Enter:
      <<Go FAKE_N_OBJ>>;
  ],
has scenery;

!========================================
! Room 7: Guest Room
!========================================
Object room07 "Guest Room"
with
  description "You're in a simply furnished guest room. This acts as your bedroom whenever you're visiting. A window in the north wall lets in the moonlight. The exit from the room is to the south.",
  n_to "The window is nailed shut.",
  s_to room06,
  out_to room06,
  after
  [;
    Hint:
      if (guest_room_window hasnt general)
        print_ret (string)OPEN_THE, "window.";
      if (room11 hasnt visited)
        print_ret (string)YOU_CANT_OPEN_WINDOW, " However, there may be another way onto the roof.";
  ],
has light;

!----------------------------------------
! Guest room (floating object)
!----------------------------------------
Object "guest room"
with
  name 'your' 'guest' 'room' 'bedroom',
  description
  [;
    if (self in room07)
      "This is the guest room. As you're the guest, it's effectively your room for the duration of your stay.";
    else
      print_ret (string)ITS_ON_OTHER_SIDE_OF_WINDOW;
  ],
  found_in room07 room11,
has scenery;

!----------------------------------------
! Guest room window (floating object)
!----------------------------------------
Object guest_room_window "window"
with
  name 'window' 'glass' 'wooden' 'frame',
  description
  [;
    print (string)ITS_A_GLASS_WINDOW;
    if (self in room07)
      print "nailed shut";
    else
      print "closed";
    print (string)WHEN_YOU_LOOK_THROUGH_WINDOW;
    if (self in room07)
      "the roof of the veranda.";
    else
      "the inside of the guest room.";
  ],
  before
  [;
    Open, Unlock:
      give self general;
      print "It's nailed shut";
      if (self in room11)
        print " from the other side";
      print " to prevent little boys like you climbing onto the roof of the veranda.";
      if (self in room11)
        print " They didn't allow for smart boys like you finding another way onto the roof.";
      "";
  ],
  found_in room07 room11,
has locked scenery;

!----------------------------------------
! Roof (floating object)
!----------------------------------------
Object "roof"
with
  name 'roof' 'of' 'veranda' 'corrugated' 'iron',
  description "It's a corrugated iron roof painted in brown.",
  before
  [;
    Exit, GetOff:
      if (self notin room10 or room11 or room12)
        "You're not on the roof. It's outside the window.";
      deadflag = 1;
      "You jump off the roof only to discover that it's a long way to the ground! You break a number of bones, but despite your yells of pain, there's no one to come to your aid.";
  ],
  found_in
  [;
    if (location == room07 or room10 or room11 or room12 or room13)
      rtrue;
    if (location == room09 && shutter has open)
      rtrue;
  ],
has scenery;

!----------------------------------------
! Your bed
!----------------------------------------
Object your_bed "bed" room07
class Surface
with
  article "your",
  name 'your' 'bed',
  description
  [;
    print "This is your bed while you're staying on the farm. It's very comfy and cosy. ";
    <<Search self>>;
  ],
  before
  [;
    LookUnder:
      print "You look under the bed";
      if (doll notin nothing)
        ", but don't find anything else, apart from dust.";
      move backpack to location;
      move doll to location;
      " and pull out your backpack. You also find a doll amongst the dust. That isn't yours, so you drag it out.";
  ],
  after
  [;
    Enter:
      print_ret (string)GET_INTO_BED;
    Exit:
      print_ret (string)GET_OUT_OF_BED;
  ],
  size 10,
has enterable static supporter;

!----------------------------------------
! Backpack
!----------------------------------------
Object backpack "backpack"
class OpenableContainer
with
  name 'backpack' 'pack' 'trusty',
  description
  [;
    print "It's your trusty backpack that you brought with you on the train. ";
    <<Search self>>;
  ],
  before
  [;
    Receive:
      if (noun.size >= self.size)
        print_ret (The)noun, " won't fit in your backpack.";
  ],
  size 6,
has clothing container openable open;

!----------------------------------------
! Doll
!----------------------------------------
Object doll "doll"
class OpenContainer
with
  name 'doll' 'effigy',
  description
  [;
    give self general;
    print "It's a doll dressed in a judo kimono, just like yours.";
    if (pins in self)
      print " It's pierced with long pins.";
    "";
  ],
  before
  [;
    Receive:
      if (noun == pins)
        "No way! You don't want to get that back pain again.";
      "The doll can't contain things.";
  ],
  after
  [;
    LetGo:
      if (noun == pins)
      {
        StopDaemon(player);
        "The pain in your back disappears as soon as you remove the pins.";
      }
  ],
  size 5,
has container open;

!----------------------------------------
! Wooden pins
!----------------------------------------
Object pins "wooden pins" doll
with
  name 'pins' 'long' 'wooden',
  description "They're long wooden pins that appear to be hand carved to a sharp point.",
  before
  [;
    Pull:
      if (self in doll)
        <<Take self>>;
    Push:
      if (self in doll)
        "Youch! The pain in your back gets worse.";
  ],
  size 3,
has pluralname;

!========================================
! Room 8: East End of Hallway
!========================================
Object room08 "East End of Hallway"
with
  description "All hallways are boring and this one is no exception. The hallway comes from the west and ends here. The only thing of interest is a trapdoor in the ceiling above your head.",
  w_to room06,
  u_to
  [;
    if (player notin ladder)
      "You can't reach the trapdoor from here.";
    return attic_trapdoor;
  ],
  after
  [;
    Hint:
      if (attic_trapdoor hasnt general)
        print_ret (string)WHATS_BEHIND_THAT, "trapdoor?";
  ],
has light;

!----------------------------------------
! Ceiling
!----------------------------------------
Object "ceiling" room08
with
  name 'ceiling',
  description
  [;
    print "There's a trapdoor in the ceiling";
    if (player notin ladder)
      ", but it's out of your reach.";
    else
      ". Now that you're on the ladder, it's within your reach.";
  ],
has scenery;

!----------------------------------------
! Trapdoor (floating object)
!----------------------------------------
Object attic_trapdoor "trapdoor"
with
  name 'trapdoor' 'trap' 'door',
  description
  [;
    print (string)ITS_A_TRAPDOOR;
    if (self in room08)
      print "ceiling";
    else
      print "floor";
    print " that's currently ";
    if (self has open)
      "open.";
    else
      "closed.";
  ],
  door_dir
  [;
    if (self in room08)
      return u_to;
    else
      return d_to;
  ],
  door_to
  [;
    if (self in room08)
      return room09;
    else
      return room08;
  ],
  before
  [;
    if (action ~= ##Examine && self in room08 && player notin ladder)
      "You can't reach it.";
  ],
  after
  [;
    Open:
      give self general;
  ],
  found_in room08 room09,
has door moved openable static;

!========================================
! Room 9: Attic
!========================================
Object room09 "Attic"
with
  description
  [;
    print "You're in a dusty attic. ";
    if (shutter has open)
      print "The moonlight shines in from a window in the north wall. ";
    else
      print "It's very dark, so you should open the shutter to let some light in. ";
    "You can leave the attic through the trapdoor in the floor.";
  ],
  d_to
  [;
    if (attic_trapdoor hasnt open)
      return attic_trapdoor;
    print "You carefully lower yourself onto the top of the ladder.^^";
    PlayerTo(ladder, 2);
    rtrue;
  ],
  n_to
  [;
    if (shutter has open)
      return attic_window;
  ],
  out_to
  [;
    if (shutter has open)
      return attic_window;
  ],
  before
  [;
    Smell:
      print_ret (string)SMELLS_MUSTY;
  ],
  after
  [;
    Hint:
      if (shutter hasnt general)
        print_ret (string)WHATS_BEHIND_THAT, "shutter?";
      if (chest hasnt general)
        print_ret (string)OPEN_THE, "chest.";
      if (hood hasnt moved)
        "That hood", (string)MIGHT_COME_IN_HANDY;
      if (attic_window hasnt general)
        print_ret (string)OPEN_THE, "window.";
      if (room10 hasnt visited)
        print_ret (string)CLIMB_THROUGH_WINDOW;
  ],
has;

!----------------------------------------
! Attic (floating object)
!----------------------------------------
Object "attic"
with
  article "an",
  name 'attic',
  description
  [;
    if (self in room09)
      "The attic is quite dark, so you can't find anything apart from the chest.";
    else
      "It's dark in the attic, so you can't see it clearly from the roof.";
  ],
  found_in room09 room10,
has scenery;

!----------------------------------------
! Shutter
!----------------------------------------
Object shutter "shutter" room09
with
  name 'shutter' 'wood' 'wooden',
  description
  [;
    print "It's a wooden shutter that's currently ";
    if (self has open)
      "open to let in the moonlight from the window.";
    else
      "closed.";
  ],
  after
  [;
    Open:
      give self general;
      give room09 light;
      give attic_window ~absent;
      MoveFloatingObjects();
      "When you open the shutter, the moonlight streams in through the window.";
    Close:
      give room09 ~light;
      give attic_window absent;
      MoveFloatingObjects();
      "When you close the shutter, the room goes darker.";
  ],
has openable static;

!----------------------------------------
! Window (floating object)
!----------------------------------------
Object attic_window "window"
with
  name 'window' 'small' 'wooden' 'frame',
  description
  [;
    print "It's a small window in a wooden frame. The window is currently ";
    if (self has open)
      print "open";
    else
      print "closed";
    print (string)WHEN_YOU_LOOK_THROUGH_WINDOW;
    if (self in room09)
      "a roof outside the attic.";
    else
      "inside the attic.";
  ],
  door_dir
  [;
    if (self in room09)
      return n_to;
    else
      return s_to;
  ],
  door_to
  [;
    if (self in room09)
      return room10;
    else
      return room09;
  ],
  after
  [;
    Open:
      give self general;
  ],
  found_in room09 room10,
has absent door openable static;

!----------------------------------------
! Chest
!----------------------------------------
Object chest "chest" room09
class OpenableContainer
with
  name 'dusty' 'old' 'chest',
  description
  [;
    print "It's a dusty old chest that's probably used to store junk. ";
    <<Search self>>;
  ],
  before
  [;
    Pull, Push, Take:
      print_ret (string)TOO_HEAVY_TO_MOVE;
  ],
  after
  [;
    Open:
      give self general;
  ],
  size 10,
has container openable static;

!----------------------------------------
! Hood
!----------------------------------------
Object hood "hood" chest
with
  name 'hood' 'brown' 'monk^s',
  description "It's a brown hood that looks like those attached to a monk's robe.",
  size 5,
has clothing;

!========================================
! Room 10: Roof Outside Attic
!========================================
Object room10 "Roof Outside Attic"
with
  description "You're on the roof outside the attic. Be careful, as it's rather slippery. You can re-enter the attic through the window to the south, but you may also be able to climb down the drainpipe to the lower roof that protects the outside veranda.",
  s_to attic_window,
  d_to room11,
  in_to attic_window,
  after
  [;
    Hint:
      if (room11 hasnt visited)
        "Climb down the drainpipe.";
  ],
has light;

!----------------------------------------
! Drainpipe (floating object)
!----------------------------------------
Object "drainpipe"
with
  name 'drainpipe' 'drain' 'pipe' 'downpipe',
  description "It's a sturdy-looking drainpipe painted in brown, the same as the roof.",
  before
  [;
    Climb:
      if (self in room10)
        <<Go FAKE_D_OBJ>>;
      else
        <<Go FAKE_U_OBJ>>;
  ],
  found_in room10 room11,
has scenery;

!========================================
! Room 11: Roof Outside Guest Room
!========================================
Object room11 "Roof Outside Guest Room"
with
  description "You're on the roof of the veranda on the north side of the house. The window to the guest room is to the south and the roof extends to the west. A drainpipe runs down the wall from another roof above this one.",
  s_to "The window is closed.",
  w_to room12,
  u_to room10,
  after
  [;
    Hint:
      if (guest_room_window hasnt general)
        print_ret (string)OPEN_THE, "window.";
      print_ret (string)YOU_CANT_OPEN_WINDOW;
  ],
has light;

!========================================
! Room 12: Roof Outside Aunt's Room
!========================================
Object room12 "Roof Outside Aunt's Room"
with
  description "You're on the roof of the veranda on the north side of the house. The window to your aunt's bedroom is to the south and the roof extends to the east.",
  e_to room11,
  s_to bedroom_window,
  in_to bedroom_window,
  after
  [;
    Hint:
      if (bedroom_window hasnt general)
        print_ret (string)OPEN_THE, "window.";
      if (room13 hasnt visited)
        print_ret (string)CLIMB_THROUGH_WINDOW;
  ],
has light;

!----------------------------------------
! Aunt's bedroom window (floating object)
!----------------------------------------
Object bedroom_window "window"
with
  name 'window' 'glass' 'wooden' 'frame',
  description
  [;
    print (string)ITS_A_GLASS_WINDOW;
    if (self has open)
      print "open";
    else
      print "closed";
    print (string)WHEN_YOU_LOOK_THROUGH_WINDOW;
    if (self in room13)
      "the roof of the veranda.";
    else
      "the inside of your aunt's bedroom.";
  ],
  door_dir
  [;
    if (self in room12)
      return s_to;
    else
      return n_to;
  ],
  door_to
  [;
    if (self in room12)
      return room13;
    else
      return room12;
  ],
  after
  [;
    Open:
      give self general;
  ],
  found_in room12 room13,
has door openable scenery;

!========================================
! Room 13: Aunt's Bedroom
!========================================
Object room13 "Aunt's Bedroom"
with
  description
  [;
    print "You're in Aunt Clarissa's bedroom. It's lit by the moonlight streaming in from the window to the north. ";
    if (room17 hasnt visited)
      print "You know to respect your aunt's privacy, so you never come in here. Just the same, you wonder why she's not in bed. Where could she be? ";
    "The door out of the room is to the south.";
  ],
  n_to bedroom_window,
  s_to bedroom_door,
  out_to bedroom_window,
  after
  [;
    Hint:
      if (small_key in nothing)
        print_ret (string)EXAMINE_THE, "nightstand.";
      if (small_key hasnt moved)
        "That small key", (string)MIGHT_COME_IN_HANDY;
      if (hairpin hasnt moved)
        "That hairpin", (string)MIGHT_COME_IN_HANDY;
  ],
has light;

!----------------------------------------
! Aunt Clarissa's bedroom (floating object)
!----------------------------------------
Object "bedroom"
with
  name 'bedroom' 'aunt' 'aunt^s' 'clarissa^s',
  description
  [;
    if (self in room12)
      print_ret (string)ITS_ON_OTHER_SIDE_OF_WINDOW;
    print "This is your Aunt Clarissa's bedroom. She should be in bed, but ";
    if (room17 hasnt visited)
      "she's not. Where is she?";
    else
      "you now know that she's been killed by the witch.";
  ],
  found_in room12 room13,
has scenery;

!----------------------------------------
! Bed
!----------------------------------------
Object aunts_bed "bed" room13
class Surface
with
  name 'bed',
  description
  [;
    print "It's your aunt's bed, but she's not in it";
    if (room17 hasnt visited)
      print ". That's strange. Where is she? ";
    else
      print ", as she's been killed by the witch. ";
    <<Search self>>;
  ],
  after
  [;
    Enter:
      print_ret (string)GET_INTO_BED;
    Exit:
      print_ret (string)GET_OUT_OF_BED;
  ],
  size 10,
has enterable static supporter;

!----------------------------------------
! Nightstand
!----------------------------------------
Object nightstand "nightstand" room13
class Surface
with
  name 'nightstand' 'dark' 'timber' 'bedside' 'table' 'night' 'stand',
  description
  [;
    print "It's a dark timber bedside table. ";
    <<Search self>>;
  ],
  before
  [;
    Search:
      if (small_key in nothing)
      {
        print "You find something. ";
        move small_key to self;
        move hairpin to self;
      }
  ],
  size 8,
has static supporter;

!----------------------------------------
! Small key
!----------------------------------------
Object small_key "small key"
with
  name 'small' 'key',
  description
  [;
    print "It looks like a household key of some sort.";
    if (self has general)
      print " You now know that it's the key for the pantry door.";
    "";
  ],
  size 1,
has;

!----------------------------------------
! Hairpin
!----------------------------------------
Object hairpin "hairpin"
with
  name 'hairpin' 'pin',
  description "Your aunt uses hairpins to put her hair up at night. This must be one of them.",
  size 1,
has clothing;

!========================================
! Room 14: Library
!========================================
Object room14 "Library"
with
  description "You're in a large room that's used as a library. This is where your aunt and uncle would rest after a hard day's work. A bookshelf against the far wall contains many volumes that they would read while relaxing with a nice a cup of tea. The exit from the library is to the east.",
  e_to room02,
  out_to room02,
  after
  [;
    Hint:
      if (quill in nothing)
        print_ret (string)EXAMINE_THE, "desk.";
      if (quill hasnt moved)
        "That quill", (string)MIGHT_COME_IN_HANDY;
      if (parchment hasnt moved)
        "That parchment", (string)MIGHT_COME_IN_HANDY;
      if (drawer hasnt general)
        print_ret (string)OPEN_THE, "drawer.";
      if (drawer has locked)
        print_ret (string)EXAMINE_THE, "lock on the drawer. If you can't find the key, you might be able to pick the lock.";
      if (drawer hasnt open && (book hasnt moved || coin hasnt moved))
        print_ret (string)OPEN_THE, "drawer.";
      if (book hasnt moved)
        "That spell book", (string)MIGHT_COME_IN_HANDY;
      if (coin hasnt moved)
        "That coin", (string)MIGHT_COME_IN_HANDY;
  ],
has light;

!----------------------------------------
! Library
!----------------------------------------
Object "library" room14
with
  name 'library',
  description "It's quite an austere setting, moreso because of the dark evening light.",
has scenery;

!----------------------------------------
! Bookshelf
!----------------------------------------
Object "bookshelf" room14
with
  name 'bookshelf' 'bookshelves' 'shelf' 'shelves',
  description "It's full of books, but you don't have time to start reading them.",
has scenery;

!----------------------------------------
! Books
!----------------------------------------
Object "books" room14
with
  name 'books',
  description "The books all look really old, like they've been bought from antique stores.",
  before
  [;
    Read:
      "You don't have time to start reading books in the middle of the night. Apart from which, they're all about old things, like mythology, witchcraft, the occult, herbs and herbal remedies. There are no books on chess.";
  ],
has pluralname scenery;

!----------------------------------------
! Desk
!----------------------------------------
Object desk "desk" room14
class Surface
with
  name 'desk' 'dark' 'wood' 'reddish' 'stain' 'highly' 'polished' 'writing' 'surface',
  description
  [;
    print "The desk looks very old. It's made of a dark wood with a reddish stain and contains a single drawer beneath the highly polished writing surface. ";
    <<Search self>>;
  ],
  before
  [;
    Search:
      if (quill in nothing)
      {
        move quill to self;
        move parchment to self;
      }
  ],
  size 10,
has static supporter;

!----------------------------------------
! Quill
!----------------------------------------
Object quill "quill"
with
  name 'quill' 'raven^s' 'black' 'feather',
  description
  [;
    print "It's made from a black feather, probably a raven's, with a nib in the end.";
    if (self has general)
      print " It's been dipped in raven's blood and is ready for writing.";
    "";
  ],
  add_to_scope nib,
  size 3,
has;

!----------------------------------------
! Nib
!----------------------------------------
Object nib "nib"
with
  name 'nib',
  description "It's attached to the quill, as it should be.",
  before
  [;
    Take:
      <<Examine self>>;
  ],
has static;

!----------------------------------------
! Parchment
!----------------------------------------
Object parchment "parchment"
with
  name 'parchment' 'animal' 'skin',
  description
  [;
    print "The parchment appears to be made from animal skin. ";
    <<Read self>>;
  ],
  before
  [;
    Burn:
      if (second == nothing && match in player && match has light)
      {
        print (string)WITH_LIT_MATCH;
        second = match;
      }
      if (second == nothing && torch in player && torch has light)
      {
        print (string)WITH_LIT_TORCH;
        second = torch;
      }
      if (second == nothing)
        print_ret (string)NOTHING_TO_BURN_IT_WITH;
      if (second ~= match or torch || second hasnt light)
        print_ret (string)CANT_BURN_IT_WITH, (ThatOrThose)second, ".";
      if (self notin circle)
        print_ret (string)YOU_MIGHT_NEED, "parchment later.";
      if (kerosene notin circle)
        print_ret (string)YOU_NEED_AN_ACCELERANT;
      <<Burn kerosene second>>;
    Read:
      if (self hasnt general)
        "There's nothing written on it.";
      else
        "The single word 'expurgo' is written on it.";
  ],
  react_after
  [;
    Write:
      print "You dip the quill into the raven's blood and write ";
      wn = consult_from;
      if (consult_words == 1 && NextWord() == 'expurgo')
      {
        give self general;
        "the name of the spell on the parchment.";
      }
      give self ~general;
      "on the parchment, but the writing disappears as soon as you write it. This must be a magical parchment that only accepts magic spells.";
  ],
  size 3,
has;

!----------------------------------------
! Drawer
!----------------------------------------
Object drawer "drawer" room14
class OpenableContainer
with
  name 'drawer' 'dark' 'wood' 'reddish' 'stain',
  description
  [;
    print "The drawer is part of the desk and is made of the same dark wood with a reddish stain. It has a tiny brass lock on the front. ";
    <<Search self>>;
  ],
  before
  [;
    Open:
      give self general;
    Unlock:
      if (second == hairpin)
        "That's not a key, although you might be able to use it to pick the lock.";
  ],
  with_key dummy_key,
  size 4,
has container lockable locked openable scenery;

!----------------------------------------
! Brass lock
!----------------------------------------
Object brass_lock "brass lock" room14
with
  name 'tiny' 'brass' 'lock',
  description "It's a tiny brass lock that takes a tiny key.",
  before
  [;
    Pick:
      if (drawer hasnt locked)
        print_ret (string)ITS_ALREADY_UNLOCKED;
      if (second == nothing && hairpin in player)
      {
        print "(with the hairpin)^";
        second = hairpin;
      }
      if (second == nothing)
        print_ret (string)YOULL_HAVE_TO_TELL_ME_WHAT_TO, "pick the lock with.";
      if (second == pins)
        "The wooden pins are too thick to fit in the lock.";
      if (second ~= hairpin)
        "You can't pick the lock with ", (ThatOrThose)second, ".";
      give drawer ~locked;
      "You fiddle around with the hairpin for a few minutes until you hear a click. The drawer is now unlocked.";
    Receive:
      if (noun ~= hairpin)
        print_ret (The)noun, " ", (DoesntOrDont)noun, " fit in the lock.";
      "It fits! Maybe you could use it to pick the lock.";
  ],
has scenery;

!----------------------------------------
! Spell book
!----------------------------------------
Object book "spell book" drawer
with
  name 'spell' 'book' 'spellbook' 'very' 'old' 'leather-bound' 'leather' 'bound',
  description
  [;
    print "It's a very old, leather-bound book with a funny symbol embossed on the cover.";
    if (self hasnt general)
      print " Maybe you should read it.";
    "";
  ],
  before
  [ nw;
    Burn:
      if (second == nothing && match in player && match has light)
      {
        print (string)WITH_LIT_MATCH;
        second = match;
      }
      if (second == nothing && torch in player && torch has light)
      {
        print (string)WITH_LIT_TORCH;
        second = torch;
      }
      if (second == nothing)
        print_ret (string)NOTHING_TO_BURN_IT_WITH;
      if (second ~= match or torch || second hasnt light)
        print_ret (string)CANT_BURN_IT_WITH, (ThatOrThose)second, ".";
      print_ret (string)YOU_MIGHT_NEED, "spell book later.";
    Consult:
      wn = consult_from;
      nw = NextWord();
      if (nw == 'adulescens')
        print_ret (string)YOU_TURN_THE_PAGES, "the adulescens spell. It's written in Latin and there's no translation to English. As best as you can work out from your schoolboy Latin, it's something about making a sacrifice to gain youthfulness. The details of the spell are lost on you.";
      if (nw == 'anima')
        print_ret (string)YOU_TURN_THE_PAGES, "the anima potion. It's written in Latin, but there's also an English translation. It says, 'Anima potion is simply holy water that's been blessed by a priest. It's used to cleanse the soul of a dead witch prior to using the expurgo spell.'";
      if (nw == 'expurgo')
        print_ret (string)YOU_TURN_THE_PAGES, "the expurgo spell. It's written in Latin, so you can't read it, but there are some hand-written notes in the margin. It says, 'Used to restore life to a dead witch. 1. Pour holy water over witch's body. 2. Draw circle in crypt with raven's blood. 3. Write 'expurgo' on parchment in raven's blood. 4. Place parchment and head within circle and set alight.'";
      if (nw == 'poena')
        print_ret (string)YOU_TURN_THE_PAGES, "the poena curse. It's written in Latin, but there are some hand-written notes at the bottom. It says, 'The poena curse is used to inflict pain or punishment on the target. 1. Make effigy dressed to look like target. 2. Place pins in effigy. 3. Place effigy close to target to maximise effect of curse. 4. Remove pins to remove curse.'";
      if (nw == 'spell' or 'curse' or 'potion')
        "You need the name of a specific spell, curse or potion.";
      if (nw == 'xyzzy' or 'plover' or 'plugh' or 'yoho')
        print_ret (string)YOU_TURN_THE_PAGES, "a list of magic words. This entry is written in English. It says, 'The much revered magicians, Crowther and Woods, invented several magic words that allowed one to teleport to another location. The best known of these were PLOVER, PLUGH and XYZZY. This began a trend, such as the famous YOHO spell invented by Adams.'";
      "You can't find any reference to that spell, curse or potion.";
    Read:
      "You flick through the pages, but it's all written in Latin. Your specialty is chess, not Latin. Although you did a little Latin at school, you thought it was boring and didn't pay attention. Now you're regretting it. Anyway, each page seems to be headed with the name of a magic spell. If you look up the name of a specific spell, you might have more luck, e.g. LOOK UP <spell> IN BOOK or READ <spell> IN BOOK or CONSULT BOOK ABOUT <spell>.";
  ],
  add_to_scope symbol,
  size 3,
has;

!----------------------------------------
! Magical symbol
!----------------------------------------
Object symbol "magical symbol"
with
  name 'magical' 'symbol' 'funny' 'cover',
  description "It looks like a magical symbol, but that might just be your vivid imagination playing tricks on you.",
has scenery;

!----------------------------------------
! Silver coin
!----------------------------------------
Object coin "silver coin" drawer
with
  name 'silver' 'coin',
  description "It's your aunt's double-headed coin. She considered it to be very valuable and very lucky.",
  size 1,
has;

!----------------------------------------
! Armchair
!----------------------------------------
Object armchair "armchair" room14
class Surface
with
  article "an",
  name 'armchair' 'chair',
  description
  [;
    print "This is the armchair that your aunt used to sit in when reading you stories. It's covered in maroon velour and looks very comfy. ";
    <<Search self>>;
  ],
  before
  [;
    Climb, Enter:
      if (verb_word == 'lie')
        "It's not big enough to lie on.";
      if (verb_word == 'stand')
        "Your aunt would have a fit if she saw you standing on her favourite armchair.";
  ],
  after
  [;
    Enter:
      "You sit on the armchair.";
    Exit:
      "You get off the armchair.";
  ],
  size 8,
has enterable static supporter;

!========================================
! Room 15: Pantry
!========================================
Object room15 "Pantry"
with
  description
  [;
    print "This is the pantry behind the kitchen. You enter it via the pantry door to the west, but you've rarely been in here because Aunt Clarissa used to keep the door locked. She said it was to stop you from pinching the food. The pantry is surrounded by shelves, apart from a gap where a stairway goes down to the basement. You were never allowed to go down there.";
    if (room17 has visited)
      print " Now you know why.";
    "";
  ],
  w_to pantry_door,
  d_to room16,
  out_to pantry_door,
  after
  [;
    Hint:
      if (freezer hasnt general)
        print_ret (string)OPEN_THE, "freezer.";
      if (aunts_body hasnt general && room22 hasnt visited)
        print_ret (string)ASK_GYPSY_WOMAN_ABOUT, "aunt.";
      if (aunts_body hasnt general && drawer has locked)
        print_ret (string)DID_YOU_ASK_ABOUT_YOUR, "aunt", (string)DID_YOU_ASK_ABOUT_REST;
      if (aunts_body hasnt general)
        print_ret (string)FOLLOW_STEPS_IN_SPELL;
  ],
has light;

!----------------------------------------
! Pantry
!----------------------------------------
Object "pantry" room15
with
  name 'pantry',
has scenery;

!----------------------------------------
! Stairway (floating object)
!----------------------------------------
Object "stairway"
with
  name 'stairway' 'stairs' 'wooden',
  description
  [;
    print "It's a rickety flight of stirs that goes ";
    if (self in room15)
      "down to the basement.";
    if (self in room17)
      "up to the pantry.";
    "up to the pantry and down to the basement.";
  ],
  before
  [;
    Climb, Enter:
      if (self in room15)
        <<Go FAKE_D_OBJ>>;
      if (self in room17)
        <<Go FAKE_U_OBJ>>;
      "Which direction, up or down?";
  ],
  found_in room15 room16 room17,
has scenery;

!----------------------------------------
! Shelves
!----------------------------------------
Object shelves "shelves" room15
class Surface
with
  name 'shelf' 'shelves',
  description
  [;
    print "The shelves line the walls of the pantry. ";
    <<Search self>>;
  ],
  size 6,
has pluralname scenery supporter;

!----------------------------------------
! Dry goods
!----------------------------------------
Object "dry goods" shelves
with
  name 'dry' 'goods' 'rice' 'flour' 'salt' 'cans',
  description "The dry goods include things like rice, flour and salt, as well as cans in all shapes and sizes.",
  before
  [;
    Take:
      "This is no time to be thinking about your stomach.";
  ],
has pluralname static;

!----------------------------------------
! Freezer
!----------------------------------------
Object freezer "freezer" room15
class OpenableContainer
with
  name 'freezer' 'large' 'metal' 'white' 'enamel' 'coating',
  description
  [;
    print "It's a large metal freezer with a white enamel coating. It reminds you of a refrigerator on it's side with the door on top. ";
    <<Search self>>;
  ],
  after
  [;
    Open:
      give self general;
  ],
  size 10,
has container openable static;

!----------------------------------------
! Aunt Clarissa's body
!----------------------------------------
Object aunts_body "Aunt Clarissa's body" freezer
class Body
with
  name 'your' 'aunt' 'aunt^s' 'clarissa' 'clarissa^s' 'body',
  description
  [;
    print "Oh, what a gruesome sight! The body has been decapitated and there's blood all over the place, but you know from her frame, age spots and flabby arms that it's definitely your Aunt Clarissa.";
    if (self has general)
      print " Her body is damp from the holy water that you poured on her.";
    "";
  ],
  before
  [;
    Receive:
      if (noun == aunts_head or uncles_head)
        print_ret (string)CANT_ATTACH_HEAD_TO_DEAD_BODY;
  ],
has animate female proper;

!========================================
! Room 16: Landing
!========================================
Object room16 "Landing"
with
  description "You're on a small landing midway down a flight of wooden stairs. You can follow them up to the ground floor of the house or down to the basement.",
  u_to room15,
  d_to room17,
  after
  [;
    Go:
      if (selected_direction == u_to && witch in room17 && witch.state < 6)
      {
        <Look>;
        "^You make sure that the witch isn't following you, then sit on the stairs and cry your eyes out. Why? Why did she have to kill your aunt? It's not fair. Your aunt never hurt anyone. If only you could bring her back to life to tell her how much you love her.^^As you wipe the tears from your eyes, you are determined to take your revenge. That witch must die!";
      }
    Hint:
      if (room17 hasnt visited)
        "Go down the stairs.";
      if (witch in room17)
        "It's time to rest and plan your next move. There are three ways to kill the witch. You just need an appropriate weapon.";
  ],
has light;

!----------------------------------------
! Landing
!----------------------------------------
Object "landing" room16
with
  name 'landing',
has scenery;

!========================================
! Room 17: Alchemy Laboratory
!========================================
Object room17 "Alchemy Laboratory"
with
  description
  [;
    print "The equipment scattered about leaves no doubt that this is a basement converted to an alchemy laboratory. You can go back up the stairs to return to the ground floor of the house or there's a trapdoor in the floor that ";
    if (room36 hasnt visited)
      "goes who knows where.";
    else
      "leads to the underground tunnel.";
  ],
  u_to
  [;
    if (witch in self)
      StopDaemon(witch);
    return room16;
  ],
  d_to lab_trapdoor,
  after
  [;
    Go:
      if (witch notin self)
        rfalse;
      StartDaemon(witch);
      if (self hasnt visited)
        witch.state = 1;
      else
        witch.state = 7;
    Hint:
      if (witch in location && dagger notin player && pitchfork notin player && (shotgun notin player || shotgun.number == 0))
        "He who hesitates is doomed. If you don't have a weapon, get out and come back later.";
      if (witch in location)
        "~Don't be mistaken,^Don't be mislead,^This witch is evil,^Better off dead.~";
      if (room36 hasnt visited)
        print_ret (string)WHATS_BEHIND_THAT, "trapdoor?";
  ],
has light;

!----------------------------------------
! Alchemy laboratory
!----------------------------------------
Object "laboratory" room17
with
  name 'alchemy' 'laboratory' 'lab' 'basement' 'alembics' 'vials' 'beakers' 'containers',
  description "You had always been told that this room is a cellar, but this is clearly no cellar. Various alembics, vials, beakers and containers are scattered everywhere.",
has scenery;

!----------------------------------------
! Witch
!----------------------------------------
Object witch "witch" room17
with
  name 'witch' 'withered' 'old' 'woman',
  description "She's a withered old woman with age spots and a hook nose. She looks the epitome of evil and she's moving towards you. If you know what's good for you, you'd better kill her or get out of here!",
  react_before
  [;
    Take:
      if (noun hasnt moved or scenery or static)
        "The witch stops you. ~No, no, no. Little boys shouldn't be taking anything from the lab.~";
  ],
  before
  [;
    Attack, Cut:
      if (second == nothing && dagger in player)
      {
        print "(with the dagger)^";
        second = dagger;
      }
      if (second == nothing && pitchfork in player)
      {
        print "(with the pitchfork)^";
        second = pitchfork;
      }
      if (second ~= dagger or pitchfork)
      {
        deadflag = 1;
        print_ret "That wasn't such a good idea. ", (string)WITCH_GOUGES_EYES_OUT;
      }
      move witch to limbo;
      move dead_witch to location;
      StopDaemon(witch);
      PronounNotice(dead_witch);
      print "You lunge at the witch and plunge ", (the)second, " into her heart before she has a chance to react. ";
      if (second == dagger)
        print "With a gurgling sound, she falls to the floor and blood drips from her mouth. She's dead.";
      else
        print "She tries to grab it, but falls forward and her weight drives the pitchfork deeper into her heart. When she rolls to the side, you can see that she's dead.";
      " You withdraw ", (the)second, " from the body.";
    Shoot:
      if (second == nothing && shotgun in player)
      {
        print "(with the shotgun)^";
        second = shotgun;
      }
      if (second == nothing)
        print_ret (string)HOW_DO_YOU_PROPOSE_TO_DO_THAT;
      if (second ~= shotgun)
        print_ret (string)CANT_SHOOT_ANYTHING_WITH, (ThatOrThose)second, ".";
      if (shotgun.number == 0)
        print_ret (string)SHOTGUN_NOT_LOADED;
      shotgun.number--;
      move witch to limbo;
      move dead_witch to location;
      StopDaemon(witch);
      PronounNotice(dead_witch);
      print_ret (string)YOU_AIM_SHOTGUN_AT, "witch", (string)AND_PULL_TRIGGER, ". When you stand up and inspect the damage, you see that the witch is covered in blood and well and truly dead.";
  ],
  daemon
  [;
    switch(self.state++)
    {
      1: "^When you enter the room, an old woman closes and bolts a trapdoor in the floor, then looks up and smiles sweetly. ~Oh, Sean. You startled me. What are you doing out of bed?~^^You're confused. This is the old woman who collected you from the railway station. When you look around, you see your aunt's head sitting on the floor, so this woman can't possibly be your aunt. She's an imposter and most likely a witch!";
      2: "^The witch stands up. ~Oh, my dear Sean, why did you have to spoil everything? I cursed you with a poena curse, but that clearly wasn't strong enough to keep you away. You must have witch's blood in you, just like your aunt and uncle.~";
      3: "^The witch takes a step towards you. ~I had to kill them for their heads. I need them for the adulescens spell, you see.~";
      4: "^~I killed your uncle on the full moon last month, but one head wasn't enough, apparently.~";
      5: "^~I killed your aunt on the last full moon. Two heads are better than one, as they say. My coven is making preparations for the spell as we speak, so let's not waste any more time.~ Oh, oh, she looks like she's about to strike.";
      6: deadflag = 1;
      print_ret "^", (string)WITCH_GOUGES_EYES_OUT;
      7: "^When you enter the room, the witch grins like a Cheshire cat. ~Oh, you're back again. That's good. We have some unfinished business.~";
      8: "^~I'm too old to go chasing you around the house. That's why I need to cast the adulescens spell. That will make me young and energetic again.~";
      9: self.state = 6;
      "^~Your aunt and uncle won't have minded donating their heads for such a good cause.~ With that, the witch steps towards you as if she's about to strike.";
    }
  ],
  state 0,
has animate female;

!----------------------------------------
! Witch's body
!----------------------------------------
Object dead_witch "dead witch"
class Body
with
  article "the",
  name 'witch' 'witch^s' 'dead' 'body' 'corpse',
  description "It's the dead witch who was masquerading as your aunt.",
has animate female;

!----------------------------------------
! Trapdoor (floating object)
!----------------------------------------
Object lab_trapdoor "trapdoor"
with
  name 'trapdoor' 'trap' 'door',
  description
  [;
    print (string)ITS_A_TRAPDOOR;
    if (self in room17)
      print "floor of the lab";
    else
      print "ceiling above the tunnel";
    print ". It's currently ";
    if (self has open)
      "open.";
    if (self in room17 && self has locked)
      "locked with a sliding bolt.";
    else
      "closed.";
  ],
  door_dir
  [;
    if (self in room17)
      return d_to;
    else
      return u_to;
  ],
  door_to
  [;
    if (self in room17)
      return room36;
    else
      return room17;
  ],
  before
  [;
    Lock:
      if (self has locked)
        print_ret (string)ALREADY_LOCKED;
      if (self in room36)
        print_ret (string)CANT_LOCK_IT_FROM_THIS_SIDE;
      if (self has open)
        print_ret (string)CLOSE_TRAPDOOR_FIRST;
      give self locked;
      print_ret (string)SLIDE_BOLT_TO_LOCK_TRAPDOOR;
    Unlock:
      if (self hasnt locked)
        print_ret (string)ITS_ALREADY_UNLOCKED;
      if (self in room36)
        print_ret (string)CANT_UNLOCK_FROM_THIS_SIDE;
      if (witch in location)
        "The witch won't let you near it. ~Little boys shouldn't go exploring in places they're not meant to go.~";
      if (second ~= nothing)
        print_ret (string)DONT_NEED_ANYTHING_TO_UNLOCK_IT;
      give self ~locked;
      print_ret (string)SLIDE_BOLT_TO_UNLOCK_TRAPDOOR;
  ],
  after
  [;
    Open:
      give self general;
  ],
  found_in room17 room36,
has door lockable locked openable static;

!----------------------------------------
! Bolt
!----------------------------------------
Object bolt1 "bolt" room17
with
  name 'bolt' 'sliding',
  description
  [;
    print (string)ITS_A_SLIDING_BOLT;
    if (lab_trapdoor hasnt locked)
      print "un";
    print (string)LOCKED_POSITION;
    if (lab_trapdoor has locked)
      print "un";
    "lock it.";
  ],
  before
  [;
    Cut:
      if (second == nothing && cutters in player)
      {
        print (string)WITH_BOLT_CUTTERS;
        second = cutters;
      }
      if (second == nothing)
        print_ret (string)YOULL_HAVE_TO_TELL_ME_WHAT_TO, "cut it with.";
      if (second ~= cutters)
        print_ret (string)CANT_CUT_BOLT_WITH, (ThatOrThose)second, ".";
      print_ret (string)HARDLY_SEEMS_NECESSARY;
    Lock:
      <<Lock lab_trapdoor>>;
    Pull, Push:
      print_ret (string)NOT_SURE_WHICH_DIRECTION_YOU_MEAN;
    Slide:
      if (lab_trapdoor has locked)
        <<Unlock lab_trapdoor>>;
      else
        <<Lock lab_trapdoor>>;
    Unlock:
      <<Unlock lab_trapdoor>>;
  ],
has scenery;

!----------------------------------------
! Torch
!----------------------------------------
Object torch "torch" room17
with
  name 'torch',
  description
  [;
    print "It's an old-fashioned torch that burns with a naked flame. This one is ";
    if (self has light)
      "lit and burning. It gives off a dull yellow glow from the flickering flame.";
    else
      "not lit, but blackened around the top where it has been used in the past.";
  ],
  before
  [;
    Burn:
      if (self has light)
        "It's already lit.";
      if (second == nothing && match in player)
      {
        print "(with the match)^";
        second = match;
      }
      if (second == nothing)
        print_ret (string)NOTHING_TO_LIGHT_IT_WITH;
      if (second ~= match)
        "You can't light anything with ", (ThatOrThose)second, ".";
      if (match hasnt light)
        "The match isnt lit.";
      give self light;
      "You light the torch with the match and it bursts into a dull yellow flame.";
    Extinguish:
      if (self hasnt light)
        "It's not lit.";
      give self ~light;
      print "You blow out the torch.^";
      if (real_location hasnt light && ~~(TestScope(match) && match has light))
      {
        new_line;
        PlayerTo(location, 2);
      }
      rtrue;
    Insert, PutOn:
      if (self has light)
        print_ret (string)NOT_WHILE_ITS_LIT;
  ],
  size 5,
has;

!----------------------------------------
! Alembic
!----------------------------------------
Object alembic "alembic" room17
class ContainerForLiquids
with
  article "an",
  name 'alembic' 'glass' 'distilling' 'device' 'gourd' 'long' 'tube',
  description
  [;
    print "It's a distilling device used in alchemy. This one is made of glass. It's shaped somewhat like a gourd with a long tube at the top shaped like the beak of a bird. ";
    <<Search self>>;
  ],
  before
  [;
    Receive:
      "The neck of the alembic is too narrow to put anything inside it.";
  ],
  size 6,
has container open transparent;

!----------------------------------------
! Yellow liquid
!----------------------------------------
Object yellow_liquid "yellow liquid" alembic
with
  name 'yellow' 'liquid' 'urine',
  description "It looks like urine. You don't really feel inclined to drink it, just in case.",
  before
  [;
    Drink:
      "Bleuch! You take a sip and it tastes disgusting, so you spit it out.";
    Smell:
      "It smells like stale urine. Why would anyone keep this? Maybe it's for a spell or potion of some sort.";
  ],
has static;

!----------------------------------------
! Aunt Clarissa's head
!----------------------------------------
Object aunts_head "Aunt Clarissa's head" room17
with
  name 'aunt' 'aunt^s' 'clarissa' 'clarissa^s' 'head' 'heads//p',
  description "It's a gruesome sight. It's definitely your Aunt Clarissa's head, but there is horror in her eyes, rather than the sparkle that you're used to.",
  before
  [;
    Burn:
      if (self notin circle)
        "Your Aunt Clarissa's head is not flammable.";
      if (kerosene notin circle)
        print_ret (string)YOU_NEED_AN_ACCELERANT;
      <<Burn kerosene second>>;
  ],
  size 7,
has proper;

!========================================
! Room 18: In Front of House
!========================================
Object room18 "In Front of House"
with
  description "You're in front of Aunt Clarissa's house, where a long path begins and heads off in a southerly direction. If you're feeling more adventurous, you can head to the hills to the east or continue exploring the farm to the west. Oh, and the entrance to the house is to the north.",
  n_to front_door,
  s_to room54,
  e_to room52,
  w_to room19,
  in_to front_door,
has light;

!----------------------------------------
! Front of house
!----------------------------------------
Object "house" room18
with
  name 'house' 'farmhouse' 'two-storey' 'two' 'storey' 'wood' 'planks',
  description "It's a two-storey farmhouse clad with wood planks and painted dark grey. It actually looks a bit eerie.",
has scenery;

!========================================
! Room 19: In Front of Barn
!========================================
Object room19 "In Front of Barn"
with
  description "You're in front of the old barn on Aunt Clarissa's farm. You can enter the barn to the south, leave the farm to the west or return to the house to the east.",
  s_to room37,
  e_to room18,
  w_to room20,
  in_to room37,
has light;

!----------------------------------------
! Barn (floating object)
!----------------------------------------
Object "barn"
with
  name 'barn' 'large' 'shed' 'crudely-sawn' 'timber',
  description
  [;
    print "It's a large barn made from crudely-sawn timber.";
    if (self in room37)
      print " It smells a bit musty inside the barn due to all the hay.";
    "";
  ],
  found_in room19 room37,
has scenery;

!========================================
! Room 20: Hills
!========================================
Object room20 "Hills"
with
  description "You're in the hills west of the farm. The hills continue to the south, otherwise you can go north or northwest or return to the farm to the east.",
  n_to room21,
  s_to room38,
  e_to room19,
  nw_to room57,
has light;

!----------------------------------------
! Hills (floating object)
!----------------------------------------
Object "hills"
with
  name 'hills' 'gently' 'rolling' 'small' 'tree' 'trees' 'bush' 'bushes',
  description "They're gently rolling hills covered in small trees and bushes.",
  found_in room20 room38 room51 room52,
has pluralname scenery;

!========================================
! Room 21: Gypsy Camp
!========================================
Object room21 "Gypsy Camp"
with
  description "You're in a small gypsy camp. They've chosen a very pleasant spot to stay. There's only the one caravan to the east, but this appears to be guarded by an elderly man. You can leave the camp by going north, south or west.",
  n_to room23,
  s_to room20,
  e_to room22,!Conditional, see before routine
  w_to room57,
  in_to room22,!Conditional, see before routine
  before
  [;
    Go:
      if (selected_direction == e_to or in_to && coin notin man)
        "The old gypsy man steps in front of you. ~If you want to see the fortune teller, it'll cost you.~";
  ],
  after
  [;
    Hint:
      if (coin notin man)
        "Talk to the gypsy man.";
      if (room22 hasnt visited)
        "What are you waiting for? Go and see Esmeralda.";
  ],
has light;

!----------------------------------------
! Gypsy camp
!----------------------------------------
Object "camp" room21
with
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'gypsy' or 'camp')
    {
      i++;
      if (nw == 'gypsy')
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description "All is quiet. There's only the one caravan to the east and this is guarded by a gypsy man.",
has scenery;

!----------------------------------------
! Gypsy caravan
!----------------------------------------
Object "gypsy caravan" room21
with
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'gypsy' or 'caravan')
    {
      i++;
      if (nw == 'gypsy')
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description "It's a gaudily-painted caravan shaped like a rectangular box with a rounded roof.",
  before
  [;
    Enter:
      <<Go FAKE_E_OBJ>>;
  ],
has scenery;

!----------------------------------------
! Old gypsy man
!----------------------------------------
Object man "old gypsy man" room21
with
  article "an",
  name 'old' 'elderly' 'gypsy' 'man',
  description "He's an olive-skinned man with a thick head of black hair and a thick moustache. He's probably in his early thirties, but, in your mind, anyone over 30 is 'old'.",
  life
  [;
    Ask:
      wn = consult_from;
      switch (NextWord())
      {
        'satisfaction', 'survey':
          "~Do you mean the satisfaction survey? I was joking about that.~";
        default:
          "~Esmeralda is a better person to ask about that.~";
      }
    Attack:
      "The gypsy man is much bigger than you, so you think better of it.";
    Give:
      if (noun == aunts_head or uncles_head)
        print_ret (string)GYPSIES_NOT_HEAD_HUNTERS;
      if (noun ~= coin)
        "The old man inspects ", (the)noun, " then gives it back to you. ~Only a coin or something else of value will gain you an audience with Esmeralda.";
      move coin to self;
      "The old man bites the coin to make sure it's genuine, then ushers you towards the caravan. ~You're free to see Esmeralda for as long as you like.~";
    Show:
      if (noun == aunts_head or uncles_head)
        print_ret (string)GYPSIES_NOT_HEAD_HUNTERS;
      if (noun ~= coin)
        "The old man doesn't seem interested in ", (the)noun, ".";
      "The old man gives a wry smile at the sight of the double-headed coin. He seems to recognise its value.";
    Talk:
      if (room22 hasnt visited && coin notin self)
        "He seems to be the guardian or caretaker of whoever lives in the caravan. ~Esmeralda has the gift. She can tell your future, give advice on relationships and prescribe herbs to cure whatever ails you. But she still needs to feed and clothe herself, so she can't afford to do this for free. A copper coin will get you a brief consultation. A silver coin will get you an in-depth consultation.~";
      if (room22 hasnt visited)
        "~Esmeralda will see you now.~";
      "~Did Esmeralda solve all your problems? I'm sure she did. If so, please fill out our satisfaction survey on your way out.~";
  ],
  before
  [;
    Shoot:
      if (TestScope(shotgun))
        print_ret (string)WHY_DO_THAT, "He's", (string)DONE_NOTHING_TO_HARM_YOU;
  ],
has animate;

!========================================
! Room 22: Gypsy Caravan
!========================================
Object room22 "Gypsy Caravan"
with
  description "You find yourself inside a gypsy caravan. It's very confined, not just because of the small space, but because it's festooned with all manner of beads and tapestries and bunches of herbs. The exit from the caravan is to the west.",
  w_to room21,
  out_to room21,
  before
  [;
    Smell:
      "You can smell a sweet aroma, like incense. It's probably coming from the herbs.";
  ],
  after
  [;
    Go:
      if (self hasnt visited)
      {
        <Look>;
        "^Esmeralda says, ~Good evening Sean.~ How does she know your name? ~My name is Esmeralda. I see that you are troubled. If I can help you, just ask. I know about many things.~";
      }
      else
      {
        <Look>;
        "^Esmeralda says, ~Welcome back, Sean. What can I do for you this time?~";
      }
    Hint:
      "Esmeralda is very knowledgeable. Ask her about your back pain, your aunt and uncle, witches, warlocks, witchcraft, and anything else you can think of or that she mentions, but especially all the spells.";
  ],

has light;

!----------------------------------------
! Gypsy caravan
!----------------------------------------
Object "gypsy caravan" room22
with
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'gypsy' or 'caravan')
    {
      i++;
      if (nw == 'gypsy')
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description "The caravan looks like the gypsy woman's home, as well as her place of work. Her personal belongings are hanging everywhere, but let's not worry about those.",
has scenery;

!----------------------------------------
! Esmeralda's belongings
!----------------------------------------
Object "Esmeralda's belongings" room22
with
  name 'esmeralda^s' 'belongings' 'beads' 'tapestries' 'bunches' 'of' 'herbs',
  description "Esmeralda is quite a hoarder, but her belongings are of no interest to you.",
has pluralname proper scenery;

!----------------------------------------
! Esmeralda's clothing
!----------------------------------------
Object "Esmeralda's clothing"
with
  name 'esmeralda^s' 'clothing' 'colourful' 'scarves' 'beads' 'grey' 'gray' 'hair',
  description "Let's not worry too much about Esmeralda's clothing or appearance.",
has proper scenery;

!----------------------------------------
! Esmeralda
!----------------------------------------
Object woman "Esmeralda" room22
with
  name 'esmeralda' 'gypsy' 'middle-aged' 'woman',
  description "Esmeralda is a middle-aged woman draped in colourful scarves and beads. A wisp of grey hair poking out from under her scarves gives her a look of wisdom.",
  life
  [;
    Ask:
      wn = consult_from;
      switch (NextWord())
      {
        'adulescens':
          "~That sounds like a witch's spell, but not one I'm familiar with. A lot of witch's spells are derived from Lation, so it may have something to do with adolescence or youthfulness.~";
        'anima':
          "~The anima potion is used to restore the soul to a dead witch. I don't know the ingredients, but I'm sure you'll find it in a witch's spell book.~";
        'aunt', 'aunty', 'clarissa':
          "~Your Aunt Clarissa was a white witch. She was a good woman. I knew her well. We used to exchange herbal remedies. I sensed her life force dissipate on the full moon a few nights ago. But all is not lost. You can revive her with the expurgo spell.~";
        'back', 'pain':
          print "~Your back pain ";
          if (pins in doll)
            print "is";
          else
            print "was";
          " the result of a poena curse. I'm not sure if you're familiar with this curse. If you'd like to know more, just ask me about it.~";
        'barn', 'cabin', 'cemetery', 'chapel', 'construction', 'crypt', 'farmhouse', 'hills', 'house', 'pond', 'site', 'woods':
          print_ret (string)ESMERALDA_PEERS_INTO_CRYSTAL_BALL, "~You seem to be asking about the local area. I don't know much about that, as I don't get out much, but I do know about some of the local people, like your aunt and uncle.~";
        'black':
          "~Black witches are evil and often have covens that perform Satanic rituals. Black witches give all witches a bad name.~";
        'book', 'spellbook':
          "~All witch's keep a spell book. It's usually passed down from generation to generation. I'm sure your aunt had one.~";
        'circle', 'circles':
          "~I presume you mean the circles used in witches' rituals. These are barriers that are believed to raise energy and keep out unwanted influences.~";
        'crow', 'crows', 'raven', 'ravens':
          "~Crows and ravens are believed to be magical creatures in many cultures. They're associated with witchcraft, death and spirits, probably because they're often seen eating dead animals.~";
        'crypt':
          "~A crypt is a burial place in an underground room or vault. In the old days, crypts were found beneath churches, but nowadays, the well-to-do can purchase a crypt in a cemetery. I believe there's a couple of crypts in the local cemetery.~";
        'curse', 'curses':
          "~A curse is a form of magic intended to inflict harm or punishment on someone or something.~";
        'doll', 'effigy':
          "~An effigy is a small figure or doll in the likeness of the victim of a poena curse.~";
        'esmeralda', 'her', 'herself':
          "~I'm a simple woman who just happens to have the gift of foresight.~";
        'expurgo':
          "~I'm a mere fortune teller, not a witch. I don't know the details of the expurgo spell, but I'm sure you can find it in a witch's spell book.~";
        'future':
          print (string)ESMERALDA_PEERS_INTO_CRYSTAL_BALL, "~The future is not pre-ordained. I see two possible paths for you, Sean. If you kill the black witch, you can restore the lives of your aunt and uncle, but if the black witch lives, an evil will befall the area around Forfar and the Sidlaw Hills.";
          if (witch in limbo)
            print " Wait! The crystal ball shows me that you have slain the black witch, so your path is much clearer.";
          "~";
        'gypsy', 'gypsies':
          "~We gypsies are a misunderstood people. Others think of us as thieves and charlatans, but we are merely a nomadic people living a simple lifestyle with respect for nature and the living creatures of this world.~";
        'me', 'myself', 'self', 'sean', 'macdonald':
          "Esmeralda gazes into her crystal ball. ~I can see that you are somewhat of a chess champion, but you would rather play on your Aunt Clarissa's farm than play chess.~ She looks up. ~Am I right?~";
        'pentagram', 'pentagrams':
          "~Pentagrams are a common symbol used in Satanic rituals. Unlike the circles that are used to keep unwanted influences out, pentagrams are used to draw evil influences in.~";
        'poena':
          print "~The poena curse is one of the most basic curses in witchcraft. You'll find it in any witch's spell book. A witch will make an effigy of their victim and push pins into the effigy. ";
          if (doll in nothing)
            print "The curse is most effective when the effigy is close to the victim, so I'd suggest looking somewhere that you frequent fairly regularly. ";
          print "To remove the curse, just remove the pins from the effigy";
          if (pins notin doll)
            print ", but I sense that you've already done that";
          ".~";
        'potion', 'potions':
          "~A potion is a liquid with various ingredients that have a healing, magical or poisonous property.~";
        'ritual', 'rituals', 'satanic':
          "~I'm not really familiar with witches' rituals. From what I've seen in the crystal ball, they often consist of chants, recitations and symbolic gestures performed around a circle. Satanic rituals are performed around a pentagram.~";
        'spell', 'spells':
          "~A spell is a form of magic that requires an incantation or the writing of a magic word on a parchment. It often requires extra ingredients for the spell to take effect. Witches record their spells in a spell book.~";
        'satisfaction', 'survey':
          "~Have you been talking to my husband? He's a bit of a joker. There is no satisfaction survey.~";
        'uncle', 'bill':
          "~Your Uncle Bill was a white witch or warlock, though he didn't practice witchcraft as often as your Aunt Clarissa. He was a hard-working man and preferred working on the farm than dabbling in witchcraft. He died under mysterious circumstances on the full moon about a month ago, but it's not too late to revive him with an expurgo spell.~";
        'warlock', 'warlocks':
          "~Some people refer to a male witch as a warlock, but it's much the same thing, really.~";
        'white':
          "~White witches use their knowledge of herbs and plants, sprinkled with a little magic, to produce tonics and potions to cure sick people.~";
        'witch', 'witches':
          "~Witches are normally depicted as women wearing a black cloak and pointed hat and flying on a broomstick. Bah! What bunkum! A witch is merely someone who practices witchcraft. There are white witches and black witches. Your aunt and uncle were white witches.~";
        'witchcraft':
          "~Witchcraft is merely the practice of magic. It takes many forms, but spells, curses and potions are the most common.~";
        default:
          "~I'm a fortune teller, not an encyclopedia. I don't know anything about that.~";
      }
    Attack:
      "The the gypsy woman is here to help you. I sincerely doubt that she'll do so if you start attacking her.";
    Give, Show:
      if (noun == aunts_head or uncles_head)
        print_ret (string)GYPSIES_NOT_HEAD_HUNTERS;
      if (noun == book)
        "~Ah, I see that you've found your aunt's spell book. Keep it close to you, as the crystal ball tells me that you'll need it.~";
      "~Thank you for showing me, Sean, but you don't need to give me any gifts.~";
    Talk:
      if (pins in doll)
        "~I can see that you suffer from back pain. Why don't you ask me about it?~";
      else
        "~Surely, you're not here to talk about the weather. Ask me about whatever troubles you.~";
  ],
  before
  [;
    Shoot:
      if (TestScope(shotgun))
        print_ret (string)WHY_DO_THAT, "She's trying to help you.";
  ],
has animate female proper;

!----------------------------------------
! Crystal ball
!----------------------------------------
Object ball "crystal ball" room22
with
  name 'crystal' 'ball',
  description "It's a perfectly clear ball, about the size of a bowling ball. When you look into it, you expect to see the future, but you only see distorted reflections.",
  before
  [;
    Search:
      <<Examine self>>;
    Take:
      "~Oi, hands off you young scallywag!~";
  ],
has static;

!========================================
! Room 23: Stream
!========================================
Object room23 "Stream"
with
  description "You're at a stream that blocks your path back to the farm. However, there are other ways to the south, west and southwest.",
  s_to room21,
  w_to room24,
  sw_to room57,
  before
  [;
    Listen:
      "You can hear the trickle of the stream to the east.";
  ],
has light;

!----------------------------------------
! Stream
!----------------------------------------
Object stream_water "stream" room23
with
  name 'stream' 'river' 'water',
  description "It's a picturesque stream that collects runoff from the hills to the south and carries it to the north.",
  before
  [;
    Drink, Enter, Swim, Take:
      "A tangle of undergrowth prevents access to the stream.";
  ],
has scenery;

!========================================
! Room 24: In Front of Chapel
!========================================
Object room24 "In Front of Chapel"
with
  description "You're in front of a chapel in the middle of the countryside. It's an idyllic location with a stream to the east and a meadow to the south. The chapel itself is to the north and the local cemetery is to the west.",
  n_to room25,
  s_to room57,
  e_to room23,
  w_to room26,
  in_to room25,
has light;

!----------------------------------------
! Chapel
!----------------------------------------
Object "chapel" room24
with
  name 'chapel' 'small' 'brick' 'building',
  description "It's a small brick building with narrow, vertical, orange-tinted windows.",
  before
  [;
    Enter:
      <<Go FAKE_N_OBJ>>;
  ],
has scenery;

!----------------------------------------
! Chapel windows (floating objects)
!----------------------------------------
Object "windows"
with
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'chapel' or 'chapel^s' or 'window' or 'windows' or 'narrow' or 'vertical' or 'orange-tinted' or 'orange' or 'tinted')
    {
      i++;
      if (nw == 'chapel')
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  found_in room24 room25,
has scenery;

!----------------------------------------
! Cemetery (floating object)
!----------------------------------------
Object "cemetery"
with
  name 'country' 'cemetery',
  description "It's a quaint little country cemetery.",
  found_in room24 room26 room27 room28 room29,
has scenery;

!========================================
! Room 25: Inside Chapel
!========================================
Object room25 "Inside Chapel"
with
  description "You're inside a small chapel associated with the nearby cemetery. This is where people come for funeral services or to pray for their dearly departed. It's a very solemn place and you know not to run around in here. The chapel is dimly lit by the moonlight filtering in through the orange-tinted windows. You can leave the chapel to the south.",
  s_to room24,
  out_to room24,
  after
  [;
    Hint:
      if (water notin jug && (aunts_body hasnt general || uncles_body hasnt general))
        "Do you have a need for holy water? If so, this is the place to get it.";
  ],
has light;

!----------------------------------------
! Chapel
!----------------------------------------
Object "chapel" room25
with
  name 'little' 'chapel' 'small' 'country' 'church',
  description "The inside of the chapel looks like a small country church and is furnished only with an altar, a stoup and some pews.",
  before
  [;
    Exit:
      <<Go FAKE_S_OBJ>>;
  ],
has scenery;

!----------------------------------------
! Altar
!----------------------------------------
Object church_altar "altar" room25
class Surface
with
  article "an",
  name 'altar' 'small' 'stained' 'wood' 'cross' 'lighter' 'coloured' 'colored',
  description
  [;
    print "This is a small altar made of stained wood inlaid with a cross in a lighter coloured wood. ";
    <<Search self>>;
  ],
  size 8,
has static supporter;

!----------------------------------------
! Stoup
!----------------------------------------
Object stoup "stoup" room25
class OpenContainer
with
  name 'stoup' 'font',
  description
  [;
    print "The stoup is a small basin mounted on a carved stone pedestal. ";
    <<Search self>>;
  ],
  before
  [;
    Receive:
      "Please don't put things in the holy water or it will no longer be holy.";
  ],
  size 4,
has container open static;

!----------------------------------------
! Bulk holy water
!----------------------------------------
Object bulk_water "holy water" stoup
with
  article "some",
  name 'holy' 'water',
  parse_name
  [;
    if (TestScope(water))
      return 0;
    else
      return -1;
  ],
  description "You can't tell that it's holy water just by looking at it, but you're sure that it's been blessed by a priest, otherwise it wouldn't be in the stoup.",
  before
  [;
    Drink:
      print_ret (string)ITS_NOT_FOR_DRINKING;
    Insert:
      <<Take self second>>;
    Remove:
      if (second == stoup)
        <<Take self nothing>>;
      if (second == jug && jug in player)
        <<Take self jug>>;
    Take:
      if (second == nothing && jug in player)
      {
        print "(with the jug)^";
        second = jug;
      }
      if (second == nothing)
        "The holy water trickles through your fingers. You'll need a container to put it in.";
      if (~~(second ofclass ContainerForLiquids))
        "You'll need a container to get the holy water and ", (the)second, " ", (IsOrAre)second, " certainly not a suitable container.";
      if (child(second) ~= 0)
        print_ret (string)YOULL_HAVE_TO_EMPTY, (the)second, " first.";
      if (second == can)
        "The can is not clean. It still contains traces of kerosene.";
!      if (second notin player)
!      {
!        print "(first taking ", (the)second, ")^";
!        move second to player;
!      }
      move water to second;
      PronounNotice(water);
      "You fill ", (the)second, " with holy water.";
  ],
has static;

!----------------------------------------
! Holy water
!----------------------------------------
Object water "holy water"
class Liquid
with
  name 'holy' 'water',
  description "You can't see the holy water in the jug, but you know it's there.",
  before
  [;
    Drink:
      print_ret (string)ITS_NOT_FOR_DRINKING;
    Insert, PourT, PutOn:
      if (second == uncles_body && uncles_body has general)
        print_ret (string)ALREADY_DONE_THAT;
      if (second == uncles_body)
      {
        remove self;
        give uncles_body general;
        print_ret (string)YOU_POUR_HOLY_WATER_OVER, (string)UNCLES_BODY_TO_CLEANSE_SOUL;
      }
      if (second == aunts_body && aunts_body has general)
        print_ret (string)ALREADY_DONE_THAT;
      if (second == aunts_body)
      {
        remove self;
        give aunts_body general;
        print_ret (string)YOU_POUR_HOLY_WATER_OVER, (string)AUNTS_BODY_TO_CLEANSE_SOUL;
      }
  ],
has;

!----------------------------------------
! Pews
!----------------------------------------
Object pews "pews" room25
class Surface
with
  name 'pew' 'pews',
  description
  [;
    print "There are four short pews on each side of the chapel. Each pew could probably seat four adults. Your mathematical mind can't help calculating that as a maximum of 32 people in the chapel. ";
    <<Search self>>;
  ],
  before
  [;
    Climb, Enter:
      if (verb_word == 'lie')
        "The pews look too uncomfortable to sleep on.";
      if (verb_word == 'stand')
        "You feel that standing on the pews would be disrespectful in a place of worship.";
      "You sit down briefly, decide that you're wasting time, and stand up again.";
  ],
  size 12,
has pluralname static supporter;

!========================================
! Room 26: Country Cemetery
!========================================
Object room26 "Country Cemetery"
with
  description "You're in the northern part of the local cemetery. This part of the cemetery is adorned with well-maintained lawns and rose gardens. Further to the south are the graves and tombstones. You can leave the cemetery to the east.",
  s_to room27,
  e_to room24,
has light;

!----------------------------------------
! Lawns and rose gardens
!----------------------------------------
Object "gardens" room26
with
  name 'well-maintained' 'lawns' 'rose' 'roses' 'garden' 'gardens',
  description "The lawns have recently been mowed and the roses are in flower, as they don't close at night.",
has scenery;

!========================================
! Room 27: Among Tombstones
!========================================
Object room27 "Among Tombstones"
with
  description "You're among a maze of tombstones in the working class part of the cemetery. The more exclusive part of the cemetery is to the south or you can leave the cemetery to the north.",
  n_to room26,
  s_to room28,
  before
  [;
    Smell:
      "There's an earthy smell from the disturbed soil.";
  ],
  after
  [;
    Hint:
      if (coffin notin location)
        "Dig the grave.";
      if (coffin has locked)
        print_ret (string)EXAMINE_THE, "coffin. Try removing the nails with an appropriate tool.";
      if (uncles_body hasnt general && room22 hasnt visited)
        print_ret (string)ASK_GYPSY_WOMAN_ABOUT, "uncle.";
      if (uncles_body hasnt general && drawer has locked)
        print_ret (string)DID_YOU_ASK_ABOUT_YOUR, "uncle", (string)DID_YOU_ASK_ABOUT_REST;
      if (uncles_body hasnt general)
        print_ret (string)FOLLOW_STEPS_IN_SPELL;
  ],
has light;

!----------------------------------------
! Tombstones
!----------------------------------------
Object "tombstones" room27
with
  name 'tombstones' 'moss' 'lichen',
  description "The tombstones range in age from very old to fairly new and everything in between. The older tombstones are weathered and covered in moss or lichen. Some of them are tilted, chipped or broken. The only tombstone of interest to you is the one that marks your Uncle Bill's grave.",
has pluralname scenery;

!----------------------------------------
! Uncle Bill's tombstone
!----------------------------------------
Object "Uncle Bill's tombstone" room27
with
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'uncle' or 'uncle^s' or 'bill^s' or 'tombstone')
    {
      i++;
      if (nw == 'uncle' && TestScope(uncles_body))
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description "The memories come flooding back when you see Uncle Bill's tombstone. One of your favourite memories is when the two of you would sing 'Old MacDonald had a farm', but he changed the words to 'Bill MacDonald had a farm'. He would sing the lyrics and you would make the animal noises. They were happy times. You wish you could bring him back to life.",
  before
  [;
    Read:
      give self general;
      "The epitaph reads:^'William ~Bill~ MacDonald^Beloved husband of Clarissa^Gone but not forgotten^R.I.P.'^^The dates after the name are too small to read in the moonlight.";
  ],
has proper static;

!----------------------------------------
! Uncle Bill's grave
!----------------------------------------
Object grave "Uncle Bill's grave" room27
with
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'uncle' or 'uncle^s' or 'bill^s' or 'grave' or 'soil' or 'earth' or 'dirt')
    {
      i++;
      if (nw == 'uncle' && TestScope(uncles_body))
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description
  [;
    if (coffin notin location)
      "The soil on the grave has been disturbed, as though someone has dug it up recently.";
    else
      "The grave has been dug up to expose the coffin.";
  ],
  before
  [;
    Dig:
      if (coffin notin nothing)
        "You've already dug the grave. That's how you found the coffin, remember?";
      if (second == nothing && shovel in player)
      {
        print "(with the shovel)^";
        second = shovel;
      }
      if (second == nothing)
        "You can't use your bare hands. It would take ages. You need something like a spade or a shovel.";
      if (second ~= shovel)
        "You're getting nowhere quick. You'll need a better digging implement than ", (a)second, ".";
      move coffin to location;
      move lid to location;
      move nails to location;
      "You dig the loose soil from the grave until you hear a thud. It's a coffin! You continue digging until the coffin is fully exposed so that you can open it.";
  ],
has proper static;

!----------------------------------------
! Coffin
!----------------------------------------
Object coffin "coffin"
class OpenableContainer
with
  name 'coffin' 'cheap-looking' 'cheap' 'looking',
  description
  [;
    print "It's a very cheap-looking coffin, not unlike an oversized soap box. ";
    if (self has locked)
      "The lid is nailed shut.";
    <<Search self>>;
  ],
  before
  [;
    Close:
      if (self hasnt open)
        "It's already closed.";
      if (~~TestScope(lid))
        "You can't. The lid is missing.";
      move lid to location;
      give lid scenery;
      give self ~open;
      "You place the lid back on the coffin.";
    Lock:
      "That's not something you can lock.";
    Open:
      if (self has locked)
        "You can't. It's nailed shut.";
      if (self has open)
        "It's already open.";
      give lid ~scenery;
      give coffin open;
      print "You take the lid off the coffin and toss it to one side. ";
      <<Search coffin>>;
    Pull, Push, Take:
      print_ret (string)TOO_HEAVY_TO_MOVE;
    Unlock:
      "That's not something you can unlock.";
  ],
  size 10,
has container lockable locked openable static;

!----------------------------------------
! Lid
!----------------------------------------
Object lid "lid"
with
  name 'lid' 'planks' 'of' 'wood',
  description
  [;
    print "The lid consists of a few planks of wood nailed together with some cross pieces.";
    if (coffin has locked)
      print " It's nailed to the coffin.";
    "";
  ],
  before
  [;
    Open:
      <<Open coffin>>;
    PutOn:
      if (second == coffin && self has scenery)
        "It's already on the coffin.";
      if (second == coffin)
        <<Close coffin>>;
    Take:
      if (coffin has locked)
        "You can't. It's nailed to the coffin.";
      if (self has scenery)
        <<Open coffin>>;
  ],
has scenery;

!----------------------------------------
! Nails
!----------------------------------------
Object nails "nails"
with
  name 'nails',
  description "They're nailed into the coffin.",
  before
  [;
    Pull, Remove, Take:
      if (second == nothing && hammer in player)
      {
        print (string)WITH_CLAW_HAMMER;
        second = hammer;
      }
      if (second == nothing)
        "You don't have anything you can use to remove the nails.";
      if (second == pliers)
        "The pincers of the pliers are too bulky to get under the heads of the nails.";
      if (second == screwdriver)
        "They're nails, not screws.";
      if (second == cutters)
        "They're nails, not bolts.";
      if (second ~= hammer)
        "You can't use ", (ThatOrThose)second, " to remove the nails.";
      remove nails;
      give coffin ~locked;
      "You remove the nails with the claw hammer and toss them to one side. The lid is now loose.";
  ],
has pluralname scenery;

!----------------------------------------
! Uncle Bill's body
!----------------------------------------
Object uncles_body "Uncle Bill's body" coffin
class Body
with
  name 'uncle' 'uncle^s' 'bill' 'bill^s' 'body' 'decapitated' 'human',
  description
  [;
    print "It's a decapitated human body. As the head is missing, you can't definitively say who it is, but it has the same build as your poor Uncle Bill and it's in his coffin.";
    if (self has general)
      print " His body is damp from the holy water that you poured on him.";
    "";
  ],
  before
  [;
    Receive:
      if (noun == aunts_head or uncles_head)
        print_ret (string)CANT_ATTACH_HEAD_TO_DEAD_BODY;
  ],
has animate proper;

!========================================
! Room 28: In Front of West Crypt
!========================================
Object room28 "In Front of West Crypt"
with
  description "You're in front of a large crypt that's protected by a gate. However, the gate is open and you can see the staircase that descends into the crypt to the south. The cemetery is to the north and another crypt is to the east.",
  n_to room27,
  s_to room31,!Conditional, see before routine
  e_to room29,
  d_to room31,!Conditional, see before routine
  before
  [;
    Go:
      if (selected_direction == s_to or d_to)
        if (guard in self && hood hasnt worn)
          "The guard blocks your way. ~You can't go down there. It's a private ceremony.~";
        else
          print "The guard bows and says, ~Welcome brother~.^^";
    Listen:
      "You can hear chanting from some sort of ceremony inside the crypt.";
  ],
  after
  [;
    Hint:
      if (hood hasnt worn)
      {
        print "If the guard is blocking the way, you may need a disguise. Examine him to see what he's wearing. ";
        if (room09 hasnt visited)
          "You haven't been to the attic yet.";
        if (chest hasnt general)
          "You missed something in the attic.";
        "You've found what you need. Now make use of it.";
      }
  ],
has light;

!----------------------------------------
! West crypt
!----------------------------------------
Object "west crypt" room28
with
  article "the",
  name 'west' 'crypt',
  description YOU_NEED_TO_GET_INSIDE,
has scenery;

!----------------------------------------
! Stairway (floating object)
!----------------------------------------
Object "stairway"
with
  name 'stairway' 'staircase' 'stairs',
  description
  [;
    print "They look like marble stairs that ";
    if (self in room28 or room29)
      print "descend into";
    else
      print "ascend from";
    " the crypt.";
  ],
  before
  [;
    Climb, Enter:
      if (self in room28 or room29)
        <<Go FAKE_D_OBJ>>;
      else
        <<Go FAKE_U_OBJ>>;
  ],
  found_in room28 room29 room30 room31,
has scenery;

!----------------------------------------
! Guard
!----------------------------------------
Object guard "guard" room28
with
  name 'guard' 'guardian',
  description "He's dressed like a monk and wears a hood that hides his face in its shadow. Under his robes, you can tell that he's a big burly man, more like a bouncer outside a nightclub than a religious figure.",
  life
  [;
    Ask:
      wn = consult_from;
      switch (NextWord())
      {
        default:
          if (hood hasnt worn)
            "~I'm not here to answer questions. Why aren't you at home in bed, anyway?~";
          else
            "~There's no time for answering questions. The ritual has started, so you'd better hurry inside.~";
      }
    Attack:
      "Oof, that was a mistake. The big, burly man just knocks you to the ground, then helps you up again. ~Sorry, little one. I sometimes don't know my own strength.~";
    Give, Show:
      if (noun == aunts_head or uncles_head)
      {
        deadflag = 1;
        "~Where did you get that?~ Whoops, big mistake! The guard draws a ceremonial sword from beneath his robes and slices through your stomach, leaving your entrails to spill out over the ground.";
      }
      "The guard says, ~Go away little boy. I'm not interested in your bribes.~";
    Talk:
      print "The guard looks you up and down. ";
      if (hood hasnt worn)
        "~This is a private ceremony. Please go away.~";
      else
        "When he sees that you're wearing a hood, he says, ~The ritual has already started. Go on in.~";
  ],
  before
  [;
    Shoot:
      if (TestScope(shotgun))
        print_ret (string)WHY_DO_THAT,"He's", (string)DONE_NOTHING_TO_HARM_YOU;
  ],
has animate;

!========================================
! Room 29: In Front of East Crypt
!========================================
Object room29 "In Front of East Crypt"
with
  description "You're in front of another crypt. This one is also protected by a gate with a stairway into the crypt to the south. When you're finished here, you can return to the cemetery towards the west.",
  s_to crypt_gate,
  w_to room28,
  d_to crypt_gate,
  after
  [;
    Hint:
      if (crypt_gate hasnt general)
        print_ret (string)EXAMINE_THE, "gate. A rusty gate requires a rusty key.";
  ],
has light;

!----------------------------------------
! East crypt
!----------------------------------------
Object "east crypt" room29
with
  article "the",
  name 'east' 'crypt',
  description YOU_NEED_TO_GET_INSIDE,
has scenery;

!----------------------------------------
! Gate (floating object)
!----------------------------------------
Object crypt_gate "rusty gate"
with
  name 'rusty' 'wrought' 'iron' 'gate',
  description
  [;
    print "It's a wrought iron gate that looks very rusty. It's currently ";
    if (self has open)
      "open.";
    else
      "closed.";
  ],
  door_dir
  [;
    if (self in room29)
      return d_to;
    else
      return u_to;
  ],
  door_to
  [;
    if (self in room29)
      return room30;
    else
      return room29;
  ],
  before
  [;
    Attack:
      "Clang!";
    Lock:
      if (self in room30)
        print_ret (string)CANT_LOCK_IT_FROM_THIS_SIDE;
  ],
  after
  [;
    Close:
      "The gate squeaks as you close it. The hinges could do with some oil.";
    Open:
      give self general;
      "The gate squeaks as you open it. You hope you didn't wake any ghosts.";
    Unlock:
      give rusty_key general;
  ],
  with_key rusty_key,
  found_in room29 room30,
has door lockable locked openable scenery;

!========================================
! Room 30: East Crypt
!========================================
Object room30 "East Crypt"
with
  description "You're in a dark underground crypt. It appears to have been carved out of the bare rock, but is otherwise featureless. It might be a new crypt that's waiting for its residents to move in. A stairway to the north leads back to the gate at the entrance to the crypt.",
  n_to crypt_gate,
  u_to crypt_gate,
  after
  [;
    Hint:
      print "This looks like a good place for casting spells, but you'll need to know the steps and have all the 'ingredients'. ";
      if (room22 hasnt visited)
        print_ret (string)ASK_GYPSY_WOMAN_ABOUT, "aunt and uncle.";
      if (book hasnt moved)
        "Find your aunt's spell book.";
      print_ret (string)FOLLOW_STEPS_IN_SPELL;
  ],
has;

!----------------------------------------
! East crypt
!----------------------------------------
Object "crypt" room30
with
  article "the",
  name 'east' 'crypt' 'bare' 'rock' 'dark' 'underground',
has scenery;

!----------------------------------------
! Dummy circle (floating object)
!----------------------------------------
Object dummy_circle "circle"
with
  name 'circle',
  before
  [;
    if (action ~= ##Draw)
    {
      PrintMsg(MSG_PARSER_NOSUCHTHING);
      rtrue;
    }
    Draw:
      if (location == room31)
        "Not here. The hooded people will see you and know that you're not one of them.";
      if (location ~= room30)
        "Not here. It must be done in a crypt.";
      if (second == nothing && raven in player)
      {
        print "(with the raven's blood)^";
        second = raven;
      }
      if (second == nothing)
        "You have nothing suitable to draw with.";
      if (second ~= raven)
        "You can't draw anything with ", (ThatOrThose)second, ".";
      move circle to location;
      "You dip your finger in the raven's blood and draw the arc of a circle on the floor of the crypt. You repeat this process a few times until you've drawn a complete circle about one metre in diameter.";
  ],
  found_in
  [;
    if (circle notin location)
      rtrue;
  ],
has scenery;

!----------------------------------------
! Circle
!----------------------------------------
Object circle "circle"
class OpenContainer
with
  name 'circle',
  description
  [;
    print "It's a rough circle drawn in raven's blood on the floor of the crypt. It's about one metre in diameter. ";
    <<Search self>>;
  ],
  before
  [;
    Burn:
      if (kerosene notin circle)
        print_ret (string)YOU_NEED_AN_ACCELERANT;
      <<Burn kerosene second>>;
    Draw:
        "You've already drawn one.";
    Receive:
      if (noun ~= aunts_head or uncles_head or parchment)
        "You shouldn't put anything in the circle apart from the things required by the spell.";
      if (noun == parchment && parchment hasnt general)
        "You're missing a step from the spell.";
  ],
  size 10,
has container open static;

!========================================
! Room 31: West Crypt
!========================================
Object room31 "West Crypt"
with
  description "You're in an underground crypt that is well lit by the flickering flames of torches mounted in sconces along the east and west walls. A pentagram is inlaid on the floor of the crypt and some sort of ritual is taking place around the pentagram. There's a stone altar to the south, but you can't see what's behind it from here. You can leave the crypt by climbing the stairs to the north.",
  n_to room28,
  s_to room32,
  u_to room28,
  before
  [;
    Listen:
      "After the stillness of the night air outside, it's relatively noisy in here. The hooded people are chanting and stomping their feet as they perfom some sort of ritual.";
  ],
  after
  [;
    Hint:
      if (room32 hasnt visited)
        "Look behind the altar.";
  ],
  each_turn
  [;
    if (uncles_head in player || aunts_head in player)
    {
      deadflag = 1;
      print "^You aren't able to hide your ";
      if (uncles_head in player)
        print "uncle's head from his adoring fans";
      else
        print "aunt's head from the hooded people";
      ". As soon as they see it, they descend upon you and beat you to death.";
    }
    if (hood hasnt worn)
    {
      deadflag = 1;
      "^Two hooded people notice that you aren't one of them. They immediately pounce on you and stick a sacrificial dagger into your stomach.";
    }
  ],
has light;

!----------------------------------------
! West crypt
!----------------------------------------
Object "west crypt" room31
with
  article "the",
  name 'west' 'crypt',
  description "This place is creepy. The flickering torchlight and the hooded figures don't help to put your mind at ease.",
has scenery;

!----------------------------------------
! Torches
!----------------------------------------
Object "torches" room31
with
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'flickering' or 'flames' or 'torch' or 'torches')
    {
      i++;
      if (nw == 'torch' && TestScope(torch))
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description "Flames burn in the torches mounted in the sconces.",
  before
  [;
    Take:
      "The torches are mounted in the sconces and there they should stay. If you attempt to take one, the hooded people will notice and goodness knows what they will do once they discover that you're not one of them.";
  ],
has scenery;

!----------------------------------------
! Sconces
!----------------------------------------
Object "sconces" room31
with
  name 'sconce' 'sconces',
  description "The sconces are mounted to the east and west walls.",
  before
  [;
    Take:
      "The sconces are firmly attached to the walls.";
  ],
has scenery;

!----------------------------------------
! Pentagram
!----------------------------------------
Object "pentagram" room31
with
  name 'pentagram' 'five-pointed' 'five' 'pointed' 'star',
  description "It's a five-pointed star inlaid on the floor of the crypt.",
has scenery;

!----------------------------------------
! Hooded people (floating object)
!----------------------------------------
Object "hooded people"
with
  name 'hooded' 'people' 'black' 'mass',
  initial
  [;
    print "Some hooded people are celebrating a black mass";
    if (self in room32)
      print ", but they can't see you while you're hidden behind the altar";
    ".";
  ],
  description "You can't swear to this, but the hooded people appear to be members of a witch's coven and are following some sort of ritual. Your aunt had told you about their Satanic rituals and you seem to have stumbled into one.",
  life
  [;
    Answer, Ask, Talk, Tell:
      "Don't be silly. You shouldn't be here, so you don't want to draw attention to yourself.";
    Attack:
      deadflag = 1;
      "That wasn't such a smart idea. You have now drawn attention to yourself. The hooded people pull back your hood and, when they see that you're not one of them, they beat you to a pulp.";
  ],
  before
  [;
    Shoot:
      if (TestScope(shotgun))
        print_ret (string) WHY_DO_THAT, "They've", (string)DONE_NOTHING_TO_HARM_YOU;
  ],
  each_turn
  [;
    if (self in room32 || deadflag == 1)
      rtrue;
    print "^The hooded people ";
    switch (random(8))
    {
      1: if (self has general)
           give self ~general;
         else
           give self general;
         "suddenly change direction.";
      2: "don't seem to notice you.";
      3: "suddenly bow down, then continue their march.";
      4: "yell a chant in some foreign language.";
      5: "suddenly throw their arms in the air, then continue their march.";
      default: print "are following one another around the pentagram in ";
      if (self has general)
        print "a clockwise";
      else
        print "an anticlockwise";
      " direction.";
    }
  ],
  found_in
  [;
    if (location == room31)
    {
      give self ~scenery static;
      rtrue;
    }
    if (location == room32)
    {
      give self scenery ~static;
      rtrue;
    }
  ],
has animate pluralname scenery;

!----------------------------------------
! Altar (floating object)
!----------------------------------------
Object crypt_altar "altar"
class Surface
with
  article "an",
  name 'altar' 'stone',
  description
  [;
    print "It's a stone altar that dominates the southern end of the crypt. ";
    <<Search self>>;
  ],
  found_in room31 room32,
  size 8,
has static supporter;

!----------------------------------------
! Uncle Bill's head
!----------------------------------------
Object uncles_head "Uncle Bill's head" crypt_altar
with
  name 'uncle' 'uncle^s' 'bill' 'bill^s' 'head' 'heads//p',
  description
  [;
    if (location == room32 && self hasnt moved)
      "You can only see the back of the head, but you can tell from the balding scalp that it's a man's head.";
    else
      "You'd recognise the balding head, the bushy eyebrows and the deep jowls anywhere. It's the severed head of your Uncle Bill! It's remarkably well preserved, considering he's been dead for a month. His eyes seem to be watching you. Ooh, that's creepy!";
  ],
  before
  [;
    Burn:
      if (self notin circle)
        "Uncle Bill's head is not flammable.";
      if (kerosene notin circle)
        print_ret (string)YOU_NEED_AN_ACCELERANT;
      <<Burn kerosene second>>;
  ],
  size 7,
has proper;

!========================================
! Room 32: Behind Altar
!========================================
Object room32 "Behind Altar"
with
  description "You're crouched behind an altar that's at the south end of a crypt. The main part of the crypt is to the north, where some sort of ritual is being performed by a group of hooded people. There's also a trapdoor in the floor behind the crypt.",
  n_to room31,
  d_to crypt_trapdoor,
  before
  [;
    Listen:
      "It's noisy on the other side of the altar, as the hooded people chant and stomp their feet.";
  ],
  after
  [;
    Hint:
      if (crypt_trapdoor hasnt general)
        print_ret (string)WHATS_BEHIND_THAT, "trapdoor?";
      if (uncles_head in crypt_altar)
        "Take your uncle's head while you're hidden from the hooded people.";
  ],
has light;

!----------------------------------------
! Trapdoor (floating object)
!----------------------------------------
Object crypt_trapdoor "trapdoor"
with
  name 'trapdoor' 'trap' 'door',
  description
  [;
    print (string)ITS_A_TRAPDOOR;
    if (self in room32)
      print "floor behind the altar";
    else
      print "ceiling above the tunnel";
    print ". It's currently ";
    if (self has open)
      "open.";
    if (self in room32 && self has locked)
      "locked with a sliding bolt.";
    else
      "closed.";
  ],
  door_dir
  [;
    if (self in room32)
      return d_to;
    else
      return u_to;
  ],
  door_to
  [;
    if (self in room32)
      return room33;
    else
      return room32;
  ],
  before
  [;
    Lock:
      if (self has locked)
        print_ret (string)ALREADY_LOCKED;
      if (self in room33)
        print_ret (string)CANT_LOCK_IT_FROM_THIS_SIDE;
      if (self has open)
        print_ret (string)CLOSE_TRAPDOOR_FIRST;
      give self locked;
      print_ret (string)SLIDE_BOLT_TO_LOCK_TRAPDOOR;
    Unlock:
      if (self hasnt locked)
        print_ret (string)ITS_ALREADY_UNLOCKED;
      if (self in room33)
        print_ret (string)CANT_UNLOCK_FROM_THIS_SIDE;
      if (second ~= nothing)
        print_ret (string)DONT_NEED_ANYTHING_TO_UNLOCK_IT;
      give self ~locked;
      print_ret (string)SLIDE_BOLT_TO_UNLOCK_TRAPDOOR;
  ],
  after
  [;
    Open:
      give self general;
  ],
  found_in room32 room33,
has door lockable locked openable static;

!----------------------------------------
! Bolt
!----------------------------------------
Object bolt2 "bolt" room32
with
  name 'bolt' 'sliding',
  description
  [;
    print (string)ITS_A_SLIDING_BOLT;
    if (crypt_trapdoor hasnt locked)
      print "un";
    print (string)LOCKED_POSITION;
    if (crypt_trapdoor has locked)
      print "un";
    "lock it.";
  ],
  before
  [;
    Cut:
      if (second == nothing && cutters in player)
      {
        print (string)WITH_BOLT_CUTTERS;
        second = cutters;
      }
      if (second == nothing)
        print_ret (string)YOULL_HAVE_TO_TELL_ME_WHAT_TO, "cut it with.";
      if (second ~= cutters)
        print_ret (string)CANT_CUT_BOLT_WITH, (ThatOrThose)second, ".";
      print_ret (string)HARDLY_SEEMS_NECESSARY;
    Lock:
      <<Lock crypt_trapdoor>>;
    Pull, Push:
      print_ret (string)NOT_SURE_WHICH_DIRECTION_YOU_MEAN;
    Slide:
      if (crypt_trapdoor has locked)
        <<Unlock crypt_trapdoor>>;
      else
        <<Lock crypt_trapdoor>>;
    Unlock:
      <<Unlock crypt_trapdoor>>;
  ],
has scenery;

!========================================
! Room 33: Underground Tunnel
!========================================
Object room33 "Underground Tunnel"
with
  description "You're in a very dark and damp underground tunnel. The tunnel extends into the darkness to the east and there's a trapdoor in the ceiling overhead.",
  e_to room34,
  u_to crypt_trapdoor,
  out_to crypt_trapdoor,
  before
  [;
    Listen:
      print_ret (string)HEAR_DRIPPING_WATER;
    Smell:
      print_ret (string)SMELLS_MUSTY;
  ],
  after
  [;
    Hint:
      if (crypt_trapdoor has locked)
        print_ret (string)OPEN_IT_FROM_OTHER_SIDE;
  ],
has;

!----------------------------------------
! Underground tunnel (floating object)
!----------------------------------------
Object "tunnel"
with
  name 'underground' 'tunnel' 'dark' 'damp',
  description "It's a very dark, very damp and very long tunnel. You wonder who dug it and why.",
  found_in room33 room34 room35 room36,
has scenery;

!========================================
! Room 34: Underground Tunnel
!========================================
Object room34 "Underground Tunnel"
with
  description "You're at a bend in a dark underground tunnel that heads off into the darkness to the northeast and west. It's really creepy.",
  w_to room33,
  ne_to room35,
  before
  [;
    Listen:
      print_ret (string)HEAR_DRIPPING_WATER;
    Smell:
      print_ret (string)SMELLS_MUSTY;
  ],
has;

!========================================
! Room 35: Underground Tunnel
!========================================
Object room35 "Underground Tunnel"
with
  description "You're at a bend in a long, dark underground tunnel. The two arms of the bend head off towards the east and southwest, but the the darkness prevents you seeing what's in those directions. It's cold and creepy down here.",
  e_to room36,
  sw_to room34,
  before
  [;
    Listen:
      print_ret (string)HEAR_DRIPPING_WATER;
    Smell:
      print_ret (string)SMELLS_MUSTY;
  ],
has;

!========================================
! Room 36: Underground Tunnel
!========================================
Object room36 "Underground Tunnel"
with
  description "You're in a dark underground tunnel that disappears into the darkness to the west. The air is cool and you hear the occasional drip of water from the ceiling. The trapdoor to leave the tunnel is overhead.",
  w_to room35,
  u_to lab_trapdoor,
  out_to lab_trapdoor,
  before
  [;
    Listen:
      print_ret (string)HEAR_DRIPPING_WATER;
    Smell:
      print_ret (string)SMELLS_MUSTY;
  ],
  after
  [;
    Hint:
      if (lab_trapdoor has locked)
        print_ret (string)OPEN_IT_FROM_OTHER_SIDE;
  ],
has;

!========================================
! Room 37: In Barn
!========================================
Object room37 "In Barn"
with
  description "You're inside a large barn. Hay is piled up against the side walls and a large workbench is along the back wall. The exit from the barn is to the north.",
  n_to room19,
  out_to room19,
  before
  [;
    Smell:
      print_ret (string)SMELLS_MUSTY;
  ],
  after
  [;
    Hint:
      if (pitchfork in nothing)
        print_ret (string)EXAMINE_THE, "hay.";
      if (hammer in nothing)
        print_ret (string)EXAMINE_THE, "tools.";
  ],
has light;

!----------------------------------------
! Hay
!----------------------------------------
Object hay "hay" room37
with
  article "some",
  name 'hay' 'haystack' 'haystacks' 'stack' 'stacks',
  description
  [;
    print "The hay is piled up in huge stacks. You find ";
    if (pitchfork notin nothing)
      "nothing apart from more hay.";
    move pitchfork to location;
    "a pitchfork under the hay where one of the haystacks has toppled over.";
  ],
  before
  [;
    Search:
      <<Examine self>>;
    Take:
      "Make hay while the sun shines, but taking hay in the moonlight won't get you anywhere.";
  ],
has static;

!----------------------------------------
! Pitchfork
!----------------------------------------
Object pitchfork "pitchfork"
with
  name 'pitchfork' 'fork' 'three-pronged' 'three' 'pronged',
  description "It's a three-pronged pitchfork.",
  before
  [;
    ThrowAt:
      if (second == witch)
        <<Attack witch self>>;
  ],
  size 11,
has;

!----------------------------------------
! Workbench
!----------------------------------------
Object workbench "workbench" room37
class Surface
with
  name 'workbench' 'work' 'bench' 'battered' 'wood' 'wooden',
  description
  [;
    print "It's a really battered wooden workbench that's clearly seen a lot of service. ";
    <<Search self>>;
  ],
  size 10,
has static supporter;

!----------------------------------------
! Tools
!----------------------------------------
Object tools "tools" workbench
with
  name 'tools',
  description
  [;
    print"The tools are thrown around haphazardly. You don't know what most of them are";
    if (hammer in nothing)
    {
      move cutters to workbench;
      move screwdriver to workbench;
      move pliers to workbench;
      move hammer to workbench;
      print ", but you do recognise a claw hammer, a pair of pliers, a screwdriver and a pair of bolt cutters";
    }
    ".";
  ],
  before
  [;
    Search:
      <<Examine self>>;
    Take:
      "There are too many tools to take them all. If you just want to take one or two, specify which ones.";
  ],
has pluralname static;

!----------------------------------------
! Claw hammer
!----------------------------------------
Object hammer "claw hammer"
with
  name 'claw' 'hammer',
  description "If you've seen one claw hammer, you've seen them all. You use the hammer to bang in nails and the two-pronged claw to pull them out again. Every home should have one.",
  size 3,
has;

!----------------------------------------
! Pliers
!----------------------------------------
Object pliers "pliers"
with
  article "a pair of",
  name 'pliers',
  description "You know that they're a pair of pliers, but you don't know what they're used for.",
  size 3,
has pluralname;

!----------------------------------------
! Screwdriver
!----------------------------------------
Object screwdriver "screwdriver"
with
  name 'screwdriver' 'slot' 'flat-blade' 'tip',
  description "It's a slot screwdriver with a very large flat-blade tip for very large screws, just the sort of thing you'd expect to find on a farm.",
  size 3,
has;

!----------------------------------------
! Bolt cutters
!----------------------------------------
Object cutters "bolt cutters"
with
  article "a pair of",
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'bolt' or 'cutter' or 'cutters' or 'heavy-duty' or 'pair' or 'of')
    {
      i++;
      if (nw == 'bolt' && (TestScope(bolt1) || TestScope(bolt2)))
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description "It's a heavy-duty pair of bolt cutters used for cutting bolts and metal rods and stuff like that.",
  size 9,
has pluralname;

!========================================
! Room 38: Hills
!========================================
Object room38 "Hills"
with
  description "You're in some gently rolling hills that continue to the north and flatten out to the south.",
  n_to room20,
  s_to room39,
has light;

!========================================
! Room 39: Field
!========================================
Object room39 "Field"
with
  description "You're on a field located between the hills to the north and the woods to the south and southeast. The field continues towards the east and there's also a disused track leading to the west.",
  n_to room38,
  s_to room42,
  e_to room56,
  w_to room40,
  se_to room43,
has light;

!----------------------------------------
! Field (floating object)
!----------------------------------------
Object "field"
with
  name 'field',
  description "The rain in Spain falls mainly on the plain, but this isn't Spain and this isn't a plain, but a field. The crops have been harvested, so it looks quite dry and barren.",
  found_in room39 room56
has scenery;

!----------------------------------------
! Track
!----------------------------------------
Object "track" room39
with
  name 'disused' 'track',
  description "Why don't you follow it?",
has scenery;

!========================================
! Room 40: In Front of Old Farmhouse
!========================================
Object room40 "In Front of Old Farmhouse"
with
  description
  [;
    print "You're facing an old farmhouse to the south. It's clearly been abandoned, as the door is boarded up and everything looks dilapidated. There's a ";
    if (farmhouse_window has open)
      print "broken ";
    "window beside the door, but it's too dark to see inside. When you've finished exploring here, you can go east or southeast.";
  ],
  s_to farmhouse_window,
  e_to room39,
  se_to room42,
  in_to farmhouse_window,
  after
  [;
    Hint:
      if (farmhouse_door hasnt general)
        print_ret (string)OPEN_THE, "door.";
      if (farmhouse_window hasnt open)
        "If you can't open the door, then try breaking the window.";
      if (room41 hasnt visited)
        print_ret (string)CLIMB_THROUGH_WINDOW;
  ],
has light;

!----------------------------------------
! Farmhouse (floating object)
!----------------------------------------
Object "farmhouse"
with
  name 'farmhouse' 'house' 'old' 'abandoned' 'dilapidated' 'wreck',
  description
  [;
    print "It's an abandoned, dilapidated wreck. It's probably best not to waste too much time here";
    if (self in room40)
      print ", unless you want to look inside";
    ".";
  ],
  before
  [;
    Enter, Exit:
      "Try the door or window.";
  ],
  found_in room40 room41,
has scenery;

!----------------------------------------
! Farmhouse door (floating object)
!----------------------------------------
Object farmhouse_door "door"
with
  name 'door' 'heavy' 'wooden',
  description
  [;
    print "The heavy wooden door is boarded up";
    if (self in room40)
      ", so you'll never get in that way.";
    else
      " from the outside, so you can't get out that way.";
  ],
  before
  [;
    Attack:
      if (self in room40)
        "You hit the door, but there's no answer. That's not surprising, considering that the farmhouse is clearly abandoned. You'll need to find another way in.";
      else
        "Are you trying to get out? Why don't you just go out the same way you came in?";
      Open:
        give self general;
  ],
  found_in room40 room41,
has scenery;

!----------------------------------------
! Farmhouse window (floating object)
!----------------------------------------
Object farmhouse_window "window"
with
  name 'window',
  description
  [;
    if (self hasnt open)
      "It's very dirty and grimy, so you can't see through it. You tap on the glass, but there's no response.";
    print "Some vandal has broken the glass, so you can climb through it to get ";
    if (self in room40)
      print "into";
    else
      print "out of";
    " the house.";
  ],
  door_dir
  [;
    if (self in room40)
      return s_to;
    else
      return n_to;
  ],
  door_to
  [;
    if (self in room40)
      return room41;
    else
      return room40;
  ],
  before
  [;
    Attack:
      if (self has open)
        "You've already broken it.";
      if (second == nothing && hammer in player)
      {
        print (string)WITH_CLAW_HAMMER;
        second = hammer;
      }
      if (second == nothing)
        "You can't break it with your bare hands.";
      if (second ~= hammer)
      {
        print (The)second, " just bounce";
        if (second hasnt pluralname)
          print "s";
        " off the glass. Try something else.";
      }
      give self open;
      print_ret (string)YOU_SMASH_GLASS;
    Climb:
      if (self in room40)
        <<Go FAKE_S_OBJ>>;
      else
        <<Go FAKE_N_OBJ>>;
    Rub:
      if (self hasnt open)
        "Most of the grime seems to be on the other side of the window.";
      else
        "There's no glass left to clean because some vandal broke it. I wonder who that might have been?";
    ThrownAt:
      if (self has open)
      {
        move noun to room41;
        "You throw ", (the)noun, " through the open window and hear it land inside.";
      }
      if (second ~= hammer)
      {
        move second to location;
        print "You throw ",(the)noun, " at the window, but ";
        if (noun hasnt pluralname)
          print "it";
        else
          print "they";
        print " just bounce";
        if (noun hasnt pluralname)
          print "s";
        print " off the glass and fall";
        if (noun hasnt pluralname)
          print "s";
        " to the ground.";
      }
      give self open;
      move noun to room41;
      print_ret (string)YOU_SMASH_GLASS;
  ],
  found_in room40 room41,
has door scenery;

!========================================
! Room 41: Inside Farmhouse
!========================================
Object room41 "Inside Farmhouse"
with
  description "You're inside an old abandoned farmhouse. It's very dark and hard to see anything, as the only light is from the moonlight that comes in through the broken window to the north. There doesn't appear to be anything here other than dust and debris. The only way out is via the door or the window to the north, but you know the door is boarded up from the outside.",
  n_to farmhouse_window,
  out_to farmhouse_window,
  before
  [;
    Smell:
      "It smells quite dusty in here.";
  ],
  after
  [;
    Hint:
      if (shotgun in nothing)
        print_ret (string)EXAMINE_THE, "debris.";
      if (shotgun hasnt moved)
        "That shotgun", (string)MIGHT_COME_IN_HANDY;
  ],
has light;

!----------------------------------------
! Broken glass
!----------------------------------------
Object "broken glass" room41
with
  article "some",
  name 'broken' 'glass',
  description "It's the shards of broken glass from the window.",
  before
  [;
    Take:
      "Leave it alone unless you want to cut yourself.";
  ],
has static;

!----------------------------------------
! Dust and debris
!----------------------------------------
Object "debris" room41
with
  article "some",
  name 'dust' 'debris',
  description
  [;
    print "It's just the dust and debris that you'd expect to find in any abandoned house.";
    if (shotgun in nothing)
    {
      move shotgun to location;
      print " Oh, wait, you find something.";
    }
    "";
  ],
  before
  [;
    Search:
      <<Examine self>>;
  ],
has static;

!----------------------------------------
! Shotgun
!----------------------------------------
Object shotgun "shotgun"
with
  name 'shotgun' 'gun' 'dual-barrel' 'dual' 'barrel',
  description
  [;
    print "It's a dual-barrel shotgun used for hunting ducks and turkeys and things like that. It's ";
    if (self.number == 0)
      "not currently loaded.";
    print "loaded with ", self.number, " cartridge";
    if (self.number > 1)
      print "s";
    ".";
  ],
  before
  [;
    Load:
      if (self.number > 0)
      {
        print "It's already loaded with ", self.number, " cartridge";
        if (self.number > 1)
          print "s";
        ".";
      }
      if (second == nothing && cartridges in player)
      {
        print "(with the cartridges)^";
        second = cartridges;
      }
      if (second == nothing)
        "You don't have anything suitable to load it with.";
      if (second ~= cartridges)
        "You can't load the shotgun with ", (ThatOrThose)second, ".";
      self.number = 2;
      move cartridges to limbo;
      "You load the cartridges into the shotgun. You're now ready to go hunting.";
  ],
  number 0,
  size 9,
has;

!========================================
! Room 42: Woods
!========================================
Object room42 "Woods"
with
  description "The woods you're in continue to the east. They're very thick to the south, so you can't go that way. Through the trees, you can see a plain to the north and northeast and more flat ground towards the northwest.",
  n_to room39,
  e_to room43,
  ne_to room56,
  nw_to room40,
has light;

!----------------------------------------
! Woods (floating object)
!----------------------------------------
Object "woods"
with
  name 'woods' 'tree' 'trees',
  description "The woods are your favourite place to explore, as they are full of trees to climb and furry little animals, like squirrels.",
  before
  [;
    Climb:
      "Climbing trees in the moonlight is probably not a good idea.";
  ],
  found_in room42 room43 room44,
has pluralname scenery;

!========================================
! Room 43: Woods
!========================================
Object room43 "Woods"
with
  description "These woods continue to the east and west. They are too thick to go south, but thin out to the north, northeast and northwest.",
  n_to room56,
  e_to room44,
  w_to room42,
  ne_to room55,
  nw_to room39,
has light;

!========================================
! Room 44: Woods
!========================================
Object room44 "Woods"
with
  description "The woods you're in continue to the west. They're too thick to go any further south, but have been cleared towards the east. If you want to leave the woods, there's a path to the north and a plain to the northwest.",
  n_to room55,
  e_to room45,
  w_to room43,
  nw_to room56,
has light;

!========================================
! Room 45: In Front of Construction Site
!========================================
Object room45 "In Front of Construction Site"
with
  description "You're in front of a construction site with a high fence around it to keep intruders out. As you're an intruder, you should probably leave the area to the north or west. For those that aren't intruding, entry to the site is via a gate to the east.",
  n_to room47,
  e_to site_gate,
  w_to room44,
  in_to site_gate,
  after
  [;
    Hint:
      if (site_gate has locked)
      {
        print "The gate is locked by a strong chain. A strong chain needs a strong tool to cut it. ";
        if (cutters in nothing)
          "Strong tools can be found on a farm. Come back when you've found something to do the job.";
        else
          "You've found what you need.";
      }
      if (site_gate hasnt general)
        print_ret (string)OPEN_THE, "gate.";
  ],
has light;

!----------------------------------------
! Construction site (floating object)
!----------------------------------------
Object "construction site"
with
  name 'construction' 'site',
  description
  [;
    print "You can't tell much about the site, ";
    if (self in room45)
      "as the fence blocks the view.";
    else
      "as they're still digging the trenches for the footings. It's probably for a new house.";
  ],
  found_in room45 room46,
has scenery;

!----------------------------------------
! Fence (floating object)
!----------------------------------------
Object "fence"
with
  name 'high' 'metal' 'fence',
  description "It's a high metal fence around the perimeter of the construction site.",
  before
  [;
    Climb:
      "There are no footholds in the fence, so climbing it is beyond your ability.";
    Cut:
      "You'd need an oxy-acetylene torch to cut through that fence.";
  ],
  found_in room45 room46,
has scenery;

!----------------------------------------
! Gate (floating object)
!----------------------------------------
Object site_gate "gate"
with
  name 'gate',
  description
  [;
    print "It's the gate to the construction site. It's currently ";
    if (self has open)
      "open.";
    print "closed";
    if (self has locked)
      print " and locked with a metal chain";
    ".";
  ],
  door_dir
  [;
    if (self in room45)
      return e_to;
    else
      return w_to;
  ],
  door_to
  [;
    if (self in room45)
      return room46;
    else
      return room45;
  ],
  after
  [;
    Open:
      give self general;
  ],
  with_key dummy_key,
  found_in room45 room46,
has door openable lockable locked scenery;

!----------------------------------------
! Chain
!----------------------------------------
Object chain "chain" room45
with
  name 'chain',
  description
  [;
    print "It's a sturdy-looking chain made of metal links. ";
    if (site_gate has locked)
      "It's locking the gate to the construction site.";
    else
      "It was locking the gate to the construction site until some vandal cut it off. Now who might have done that?";
  ],
  before
  [;
    Cut:
      if (self hasnt scenery)
        print_ret (string)ALREADY_DONE_THAT;
      if (second == nothing && cutters in player)
      {
        print (string)WITH_BOLT_CUTTERS;
        second = cutters;
      }
      if (second == nothing)
        "You don't have anything to cut it with.";
      if (second ~= cutters)
        "you can't cut it with ", (ThatOrThose)second, ".";
      give self ~scenery;
      give site_gate ~locked;
      "You cut the chain with the bolt cutters and it falls to the ground. This better be worth it!";
    Take:
      if (self has scenery)
        "You try taking the chain off the gate, but it only rattles. You'll have to cut it off somehow.";
  ],
  size 5,
has scenery;

!========================================
! Room 46: Construction Site
!========================================
Object room46 "Construction Site"
with
  description "You're on a construction site scattered with heavy tools where the labourers just dropped everything before heading home for the day. Most notable are a partially dug trench and piles of dirt. The site is surrounded by a high fence, probably for safety reasons, and the exit from the site is through a gate in the fence to the west.",
  w_to site_gate,
  out_to site_gate,
  after
  [;
    Hint:
      if (shovel in nothing)
        print_ret (string)EXAMINE_THE, "tools.";
      if (shovel hasnt moved)
        "That shovel",(string)MIGHT_COME_IN_HANDY;
  ],
has light;

!----------------------------------------
! Trench
!----------------------------------------
Object "trench" room46
with
  name 'trench',
  description "The trench looks like it's for the footings of a house. The dirt from the trench is piled up to one side, waiting to be carted away.",
  before
  [;
    Dig:
      "The trench has already been dug. There's no point digging it any deeper.";
    Enter:
      "You jump into the trench and have a look around. When you don't find anything, you jump out again.";
  ],
has static;

!----------------------------------------
! Dirt
!----------------------------------------
Object "dirt" room46
with
  name 'piles' 'of' 'dirt' 'soil' 'earth',
  description "It's the dirt out of the trench.",
  before
  [;
    Dig:
      "It's already been dug out of the trench. There's no point digging it again.";
    Take:
      "Leave the dirty work to the labourers working on the construction site.";
  ],
has scenery;

!----------------------------------------
! Tools
!----------------------------------------
Object "tools" room46
with
  name 'tools',
  description
  [;
    print "They're all heavy-duty tools like pickaxes and wheelbarrows and of no use to you.";
    if (shovel in nothing)
    {
      move shovel to location;
      print " However, you do notice a shovel that could come in handy.";
    }
    "";
  ],
has pluralname static;

!----------------------------------------
! Shovel
!----------------------------------------
Object shovel "shovel"
with
  name 'shovel' 'long-handled' 'long' 'handled',
  description "It's a long-handled shovel that's used for shovelling loose soil.",
  size 11,
has;

!========================================
! Room 47: Country Path
!========================================
Object room47 "Country Path"
with
  description "You're on a path that leads to your aunt's house towards the west and continues to the east. You can leave the path to the north and northeast. The woods to the south have recently been cleared, so you can also go that way.",
  n_to room53,
  s_to room45,
  e_to room48,
  w_to room55,
  ne_to room51,
has light;

!----------------------------------------
! Country path (floating object)
!----------------------------------------
Object "path"
with
  name 'country' 'dirt' 'path',
  description "It's a simple dirt path that skirts the hills south of the farm.",
  found_in room47 room48 room54 room55,
has scenery;

!========================================
! Room 48: Country Path
!========================================
Object room48 "Country Path"
with
  description "The path runs west and peters out towards the northeast. You can also head towards the hills to the north.",
  n_to room51,
  w_to room47,
  ne_to room49,
has light;

!========================================
! Room 49: In Front of Cabin
!========================================
Object room49 "In Front of Cabin"
with
  description "You're in front of an old log cabin used by hunters. The entrance to the cabin is via a door to the south. Otherwise, you can follow a path to the southwest or venture into the hills to the west.",
  s_to cabin_door,
  w_to room51,
  sw_to room48,
  in_to cabin_door,
  after
  [;
    Hint:
      if (cabin_door hasnt general)
        print_ret (string)OPEN_THE, "door.";
  ],
has light;

!----------------------------------------
! Cabin (floating object)
!----------------------------------------
Object "cabin"
with
  name 'log' 'cabin',
  description "It's a log cabin that looks to be uninhabited, but well maintained.",
  found_in room49 room50,
has scenery;

!----------------------------------------
! Cabin door (floating object)
!----------------------------------------
Object cabin_door "door"
with
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'cabin' or 'door' or 'simple' or 'wooden')
    {
      i++;
      if (nw == 'cabin')
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description
  [;
    print "It's a simple wooden door, as you'd expect in a log cabin. The door is currently ";
    if (self has open)
      "open.";
    else
      "closed.";
  ],
  door_dir
  [;
    if (self in room49)
      return s_to;
    else
      return n_to;
  ],
  door_to
  [;
    if (self in room49)
      return room50;
    else
      return room49;
  ],
  after
  [;
    Open:
      give self general;
  ],
  found_in room49 room50,
has door openable scenery;

!========================================
! Room 50: In Cabin
!========================================
Object room50 "In Cabin"
with
  description "You're in a cabin used by hunters during the duck-hunting season. There are no ducks around at the moment, so the cabin is empty. Use of the cabin is based on an honour system whereby the cabin is left unlocked, but users must keep it clean and tidy. You can leave the cabin via the door to the north.",
  n_to cabin_door,
  out_to cabin_door,
  before
  [;
    Smell:
      print_ret (string)SMELLS_MUSTY;
  ],
  after
  [;
    Hint:
      if (cartridges in nothing)
        "Look under the bunk.";
      if (cartridges hasnt moved)
        "Those cartridges", (string)MIGHT_COME_IN_HANDY;
      if (can hasnt moved)
        "That kerosene can", (string)MIGHT_COME_IN_HANDY;
  ],
has light;

!----------------------------------------
! Stove
!----------------------------------------
Object stove "stove" room50
with
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'stove' or 'old' or 'kerosene')
    {
      i++;
      if (nw == 'kerosene' && TestScope(kerosene))
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description "It's an old kerosene stove that can be used for cooking, but it's normally just used for heating the cabin, as the hunters usually cook their meals on portable gas stoves.",
has static;

!----------------------------------------
! Bunk
!----------------------------------------
Object bunk "bunk" room50
class Surface
with
  name 'bunk' 'double-decker' 'double' 'decker' 'bed' 'upper' 'lower',
  description
  [;
    print "It's a double-decker bunk used by the hunters during duck-hunting season. If there are more than two hunters in the cabin, the others sleep on the floor. ";
    <<Search self>>;
  ],
  before
  [;
    LookUnder:
      print "There are a few leaves that have been blown in through the door. ";
      if (cartridges notin nothing)
        "Other than that, there's nothing of interest.";
      move cartridges to location;
      "You also find a couple of small cylindrical objects that you drag out.";
  ],
  after
  [;
    Enter:
      "You're too small to climb into the upper bunk, so you get into the lower bunk.";
    Exit:
      "You get out of the bunk.";
  ],
  size 10,
has enterable static supporter;

!----------------------------------------
! Leaves
!----------------------------------------
Object "leaves" room50
with
  name 'leaves',
  before
  [;
    Take:
      "This is no time to start a botany collection.";
  ],
has pluralname scenery;

!----------------------------------------
! Cartridges
!----------------------------------------
Object cartridges "cartridges"
with
  article "two",
  name 'cartridges',
  description "They're shotgun cartridges.",
  before
  [;
    Count:
      "There are two cartridges.";
    Insert:
      if (second == shotgun)
        <<Load second self>>;
  ],
  size 3,
has pluralname;

!----------------------------------------
! Kerosene can
!----------------------------------------
Object can "kerosene can" room50
class ContainerForLiquids
with
  parse_name
  [ nw i flag;
    nw = NextWord();
    while (nw == 'kerosene' or 'kero' or '5-litre' or '5//' or 'litre' or 'five-litre' or 'five' or 'can' or 'tin' or 'of')
    {
      i++;
      if (nw == 'kerosene' or 'kero' && TestScope(kerosene))
        flag++;
      nw = NextWord();
    }
    if (i == flag)
      return 0;
    return i;
  ],
  description
  [;
    print "It's a 5-litre kerosene can.";
    if (self in player)
    {
      print " Judging by the weight, it's ";
      if (kerosene notin self)
        print "empty.";
      else
        print "full.";
    }
    "";
  ],
  before
  [;
    Empty:
      if (kerosene notin self)
        "The kerosene can is empty.";
      if (location ~= room30)
        "Don't waste the kerosene. You might need it later.";
      if (circle notin location)
        print_ret (string)MISSING_SOMETHING;
      if (aunts_head notin circle || uncles_head notin circle || parchment notin circle)
        print_ret (string)MISSING_SOMETHING;
      move kerosene to circle;
      "You pour the kerosene over the two heads and the parchment. The spell is almost complete.";
    EmptyT:
      if (second ~= circle)
        "Don't waste it. You might need it later.";
      <<Empty self>>;
    Receive:
      "The can is intended for kerosene. You can't possibly put anything else into it.";
    Smell:
      if (kerosene in self)
        "It smells like kerosene.";
    Wave:
      if (kerosene in self)
        "You hear the kerosene splooshing around inside.";
  ],
  after
  [;
    Take:
      if (kerosene in self)
        "You hear something splooshing around inside the can when you pick it up.";
  ],
  size 6,
has container open;

!----------------------------------------
! Kerosene
!----------------------------------------
Object kerosene "kerosene" can
with
  article "some",
  name 'kerosene' 'kero',
  description
  [;
    if (self in can)
      "You can't see the kerosene while it's in the can, but you can certainly smell it.";
    else
      "It's spilled all over the contents of the circle, just waiting to be lit.";
  ],
  before
  [;
    Burn:
      if (second == nothing && match in player && match has light)
      {
        print (string)WITH_LIT_MATCH;
        second = match;
      }
      if (second == nothing && torch in player && torch has light)
      {
        print (string)WITH_LIT_TORCH;
        second = torch;
      }
      if (second == nothing)
        print_ret (string)NOTHING_TO_LIGHT_IT_WITH;
      if (second ~= match or torch)
        "You can't light the kerosene with ", (ThatOrThose)second, ".";
      if (second hasnt light)
        "Try lighting it first.";
      if (self in can)
        "Are you crazy? You'd blow yourself to kingdom come! Pour it out of the can first.";
      if (uncles_body hasnt general)
        print_ret (string)YOU_HAVENT, (string)CLEANSED, "uncle's body.";
      if (aunts_body hasnt general)
        print_ret (string)YOU_HAVENT, (string)CLEANSED, "aunt's body.";
      if (circle notin location)
        print_ret (string)YOU_HAVENT, "drawn the circle.";
      if (uncles_head notin circle)
        print_ret (string)YOU_HAVENT, "placed your uncle's head in the circle.";
      if (aunts_head notin circle)
        print_ret (string)YOU_HAVENT, "placed your aunt's head in the circle.";
      if (parchment hasnt general)
        print_ret (string)YOU_HAVENT, "written the name of the spell on the parchment.";
      if (parchment notin circle)
        print_ret (string)YOU_HAVENT, "placed the parchment in the circle.";
      deadflag = 2;
      "You light the kerosene with the lit ", (name)second, " and the flame consumes the contents of the circle. When the flame reaches its crescendo, your aunt and uncle rise from the flames like a phoenix rising from the ashes. Your aunt waves her arm and the flames die down. Your aunt and uncle step out of the circle, unharmed and unburnt, and hug you with all their might.^^Your aunt sheds a tear and says, ~My dear Sean. I knew you had witch's blood in you. I could feel it.~^^Your uncle intervenes, ~That was a very brave thing you did, Sean. We will forever be indebted to you.~^^They're both alive. That's all that matters. Then your aunt says, ~Let's head back to the house and have a nice cup of tea. I want to hear all about your adventures to save us.~";
    Insert, PourT, PutOn:
      if (second == uncles_head or aunts_head or parchment or circle)
        <<Empty can>>;
    Take:
      if (self in can)
        "You can't take the kerosene out of the can. You can only pour it into something or empty the can into something.";
      "Don't be silly. You can't take the kerosene once it's been poured out.";
  ],
has static;

!========================================
! Room 51: Between Hills
!========================================
Object room51 "Between Hills"
with
  description "You find yourself between a couple of low-lying hills. You can see that the hills continue to the northwest and there's a low lying depression to the west. You know from experience that a path skirts the hills to the southwest, south and east.",
  s_to room48,
  e_to room49,
  w_to room53,
  nw_to room52,
  sw_to room47,
  before
  [;
    Go:
      if (boar in self && selected_direction == n_to or s_to or e_to or w_to or nw_to or sw_to)
        StopDaemon(boar);
  ],
  after
  [;
    Go:
      if (boar in self)
      {
        boar.state = 0;
        StartDaemon(boar);
      }
    Hint:
      if (boar in self)
        "You can kill the boar, but it's easier just to avoid it.";
      if (ravens in self)
        print_ret (string)DO_YOU_HAVE_USE_FOR_RAVENS;
      if (raven in self && raven hasnt moved)
        "That raven", (string)MIGHT_COME_IN_HANDY;
  ],
has light;

!----------------------------------------
! Boar
!----------------------------------------
Object boar "boar" room51
with
  name 'boar' 'hairy' 'oversized' 'pig' 'tusks',
  description HAIRY_OVERSIZED_PIG,
  before
  [;
    Attack:
      "Are you kidding? If you get too close to the boar, it'll surely turn you into mince meat. If you're insistent on killing the boar, you'll have to do it from a safe distance.";
    Shoot:
      if (second == nothing && shotgun in player)
      {
        print "(with the shotgun)^";
        second = shotgun;
      }
      if (second == nothing)
        print_ret (string)HOW_DO_YOU_PROPOSE_TO_DO_THAT;
      if (second ~= shotgun)
        print_ret (string)CANT_SHOOT_ANYTHING_WITH, (ThatOrThose)second, ".";
      if (shotgun.number == 0)
        print_ret (string)SHOTGUN_NOT_LOADED;
      shotgun.number--;
      move boar to limbo;
      move dead_boar to location;
      PronounNotice(dead_boar);
      StopDaemon(self);
      print (string)YOU_AIM_SHOTGUN_AT, "boar", (string)AND_PULL_TRIGGER, " and you instinctively put your arms over your head in case your shot missed and the boar is charging at you. When you don't get mauled by the boar, you stand up and see that there's now a dead boar on the ground. Woohoo!";
      if (ravens in room53)
      {
        move ravens to location;
        print "^^A flock of ravens flies in from the west and settles on the carcass.";
      }
      "";
    ThrownAt:
      move noun to location;
     "You throw ", (the)noun, " at the boar, but it misses.";
  ],
  daemon
  [;
    print "^The boar ";
    switch (self.state++)
    {
      0: "sees you and starts snorting.";
      1: "scrapes the ground with its hoofs as though it's getting ready to charge.";
      2: "charges at you. Quick, run away!";
      3: deadflag = 1;
        if (player in ladder)
          print "knocks you off the ladder, then ";
        "pounces on you. In just a few minutes, it has gored you and torn your body to pieces with its sharp tusks.";
    }
  ],
  state 0,
has animate neuter;

!----------------------------------------
! Dead boar
!----------------------------------------
Object dead_boar "dead boar"
with
  name 'dead' 'boar',
  description
  [;
    print_ret (string)HAIRY_OVERSIZED_PIG, " Fortunately for you, it's dead.";
  ],
  life
  [;
    print_ret (string)IN_CASE_YOU_DIDNT_NOTICE, "it's dead.";
  ],
  before
  [;
    Cut:
      if (second == nothing && dagger in player)
      {
        print "(with the dagger)^";
        second = dagger;
      }
      if (second == nothing)
        print_ret (string)YOULL_HAVE_TO_TELL_ME_WHAT_TO, "cut it with.";
      if (second ~= dagger)
        "The boar's hide is far too tough to cut it with ", (ThatOrThose)second, ".";
      "The boar is already dead. Do you expect to cut it up for the Sunday roast?";
    Pull, Push, Take:
      print_ret (string)TOO_HEAVY_TO_MOVE;
    Shoot:
      if (TestScope(shotgun))
        print_ret (string)IN_CASE_YOU_DIDNT_NOTICE, "it's already dead.";
  ],
has animate neuter;

!========================================
! Room 52: Hilly Territory
!========================================
Object room52 "Hilly Territory"
with
  description "You're in the desolate hills east of your aunt's house. The hills continue to the southeast. You can also see the glistening of moonlight reflected on water to the south.",
  s_to room53,
  w_to room18,
  se_to room51,
has light;

!========================================
! Room 53: Pond
!========================================
Object room53 "Pond"
with
  description "You're in front of a small pond that acts as a watering hole for the local widlife. The edge of the pond is marshy and surrounded by reeds, so you can't get to it. However, you can skirt around the pond to go north, south, east or west.",
  n_to room52,
  s_to room47,
  e_to room51,
  w_to room54,
  before
  [;
    Listen:
      "You can hear some frogs croaking nearby, but you can't see where it's coming from.";
  ],
  after
  [;
    Hint:
      if (ravens in self)
        print_ret (string)DO_YOU_HAVE_USE_FOR_RAVENS;
      if (raven in self && raven hasnt moved)
        "That raven", (string)MIGHT_COME_IN_HANDY;
  ],
has light;

!----------------------------------------
! Pond
!----------------------------------------
Object "pond" room53
with
  name 'pond' 'pool' 'still' 'water' 'rainwater',
  description "It's a still pond that collects rainwater from the surrounding hills.",
  before
  [;
    Drink:
      if (ravens in location)
        "You don't want to scare the ravens away. Perhaps wait until they're gone.";
      else
        "Ah, very refreshing, but I think you swallowed a tadpole.";
  ],
has scenery;

!----------------------------------------
! Ravens
!----------------------------------------
Object ravens "ravens" room53
with
  name 'raven' 'ravens' 'flock' 'of' 'noisy' 'bird' 'birds',
  description
  [;
    print "It's a flock of noisy ravens that have come to ";
    if (self in room53)
      print "the pond to drink and hunt for insects in the moonlight.";
    else
      print "feed on the dead boar.";
    " They pay you no attention, as they're busy sqwarking and squabbling amongst themselves.";
  ],
  life
  [;
    if (action == ##Attack)
      "The ravens flutter out of the way to avoid your attack, then settle back down again.";
    else
      "They're ravens, not people.";
  ],
  before
  [;
    Shoot:
      if (second == nothing && shotgun in player)
      {
        print "(with the shotgun)^";
        second = shotgun;
      }
      if (second == nothing)
        print_ret (string)HOW_DO_YOU_PROPOSE_TO_DO_THAT;
      if (second ~= shotgun)
        print_ret (string)CANT_SHOOT_ANYTHING_WITH, (ThatOrThose)second, ".";
      if (shotgun.number == 0)
        print_ret (string)SHOTGUN_NOT_LOADED;
      shotgun.number--;
      move ravens to limbo;
      move raven to location;
      print_ret (string)YOU_AIM_SHOTGUN_AT, "flock of ravens", (string)AND_PULL_TRIGGER, " and the ravens take flight. When you stand up again, you see that the volley of buckshot managed to hit one of the ravens. It flaps about for a moment, then goes still.";
    Take:
      "You can't get close enough without scaring them away.";
    ThrownAt:
      move noun to location;
      print "In your bumbling effort to throw ", (the)noun, " at the ravens, they take flight amidst a cacophony of shrill calls. ";
      if (noun ~= pitchfork)
        "When they realise there's no danger, they settle back down around the pond.";
      move ravens to limbo;
      move raven to location;
      give raven general;
      "After the ravens have flown away, you realise that one of them is left behind flapping its wings in a last desperate bid to escape, then it goes still. Through sheer dumb luck, you have managed to spear one of the ravens with the pitchfork.";
  ],
has animate neuter pluralname;

!----------------------------------------
! Dead raven
!----------------------------------------
Object raven "dead raven"
with
  name 'dead' 'raven' 'raven^s' 'blood' 'bird',
  description
  [;
    print "It's the dead raven that you ";
    if (self hasnt general)
      "shot. It's body is riddled with blood spots from the buckshot wounds.";
    else
      "speared with the pitchfork. It's body is bleeding from the pitchfork wounds.";
  ],
  size 5,
has neuter;

!========================================
! Room 54: Country Path
!========================================
Object room54 "Country Path"
with
  description "You're on a country path that leads to your aunt's house to the north. Some brambles prevent you leaving the path to the west, but the east is clear. The path continues to the south.",
  n_to room18,
  s_to room55,
  e_to room53,
  w_to BRAMBLES_PREVENT_YOU,
has light;

!----------------------------------------
! Brambles (floating object)
!----------------------------------------
Object "brambles"
with
  name 'brambles' 'prickly' 'bushes',
  description "They're horrible, prickly bushes. It's best to avoid them.",
  found_in room54 room56,
has pluralname scenery;

!========================================
! Room 55: Country Path
!========================================
Object room55 "Country Path"
with
  description "You're at a bend on a country path that heads to the north and east. The area to the west is also flat, but this doesn't appear to be a path. There are woods to the south and southwest.",
  n_to room54,
  s_to room44,
  e_to room47,
  w_to room56,
  sw_to room43,
has light;

!========================================
! Room 56: Field
!========================================
Object room56 "Field"
with
  description "You're on a field that continues to the west and peters out to the east. In the other directions, the field is bordered by brambles to the north and woods to the south, southeast and southwest.",
  n_to BRAMBLES_PREVENT_YOU,
  s_to room43,
  e_to room55,
  w_to room39,
  se_to room44,
  sw_to room42,
has light;

!========================================
! Room 57: Meadow
!========================================
Object room57 "Meadow"
with
  description "You find yourself in a picturesque meadow full of long grass and flowers. You can leave the meadow to the north, northeast, east or southeast.",
  n_to room24,
  e_to room21,
  ne_to room23,
  se_to room20,
has light;

!----------------------------------------
! Meadow
!----------------------------------------
Object "meadow" room57
with
  name 'meadow' 'long' 'grass' 'flowers',
  description "The long grass and flowers in the meadow wave about gently in the evening breeze.",
has scenery;

!========================================
! Limbo
!========================================
Object limbo;

Object dummy_key;

!========================================
! Printing rules
!========================================
[ consultWord word i;
  for (i=0:i<WordLength(word):i++)
    print (char)LowerCase(WordAddress(word)->i);
];

[ DoesntOrDont obj;
  if (obj has pluralname)
    print "don't";
  else
    print "doesn't";
];

[ firstConsultWord word i;
  for (i=0:i<WordLength(word):i++)
    if (i == 0)
      print (char)UpperCase(WordAddress(word)->i);
    else
      print (char)LowerCase(WordAddress(word)->i);
];

!========================================
! Other routines
!========================================
[ LowerCase c; ! for ZSCII matching ISO 8859-1
  switch (c)
  {
    'A' to 'Z': c = c + 32;
    202, 204, 212, 214, 221: c--;
    217, 218: c = c - 2;
    158 to 160, 167, 168, 208 to 210: c = c - 3;
    186 to 190, 196 to 200: c = c - 5 ;
    175 to 180: c = c - 6;
  }
  return c;
];

[ PlayerDaemon;
  if (turns < 93)
  {
    current_count--;
    if (current_count == 0)
    {
      start_count--;
      current_count = start_count;
      "^You feel a pain in your back.";
    }
    return;
  }
  print "^The pain in your back ";
  if (turns < 98)
    "is getting worse.";
  if (turns < 103)
    "is getting unbearable.";
  deadflag = 1;
  "causes you to fall to the ground in agony. You pass out and never wake again.";
];

[ UpperCase c; ! for ZSCII matching ISO 8859-1
  switch (c)
  {
    'a' to 'z': c = c - 32;
    201, 203, 211, 213, 220: c++;
    215, 216: c = c + 2;
    155 to 157, 164, 165, 205 to 207: c = c + 3;
    181 to 185, 191 to 195: c = c + 5 ;
    169 to 174: c = c + 6;
  }
  return c;
];

!========================================
! Grammar
!========================================
Extend 'ask'
  * 'about' topic -> AskAbout;

Extend 'blow' replace
  * noun -> Blow
  * 'on'/'onto' noun -> Blow
  * 'out' noun -> Extinguish
  * noun 'out' -> Extinguish;

Extend 'climb' first
  * 'up' -> Ascend
  * 'up' noun -> Ascend
  * 'down' -> Descend
  * 'down' noun -> Descend
  * 'off' noun -> Exit
  * 'in'/'on'/'out'/'through' noun -> Enter;

Extend 'cut' first
  * noun 'with' held -> Cut;

Extend 'empty'
  * noun 'in'/'inside' noun -> EmptyT
  * noun 'from' noun -> Empty reverse;

Extend 'fill' first
  * noun 'with' noun -> Fill;

Extend 'get' first
  * noun 'with' held -> Take;

Extend 'go'
  * 'through' noun -> Enter;

Extend 'lock' first
  * noun -> Lock;

Extend 'look'
  * 'into' noun -> Search
  * 'behind'/'under' noun -> LookUnder
  * 'through' noun -> Examine
  * 'up' topic 'in' noun -> Consult reverse;

Extend 'pick'
  * noun -> Pick
  * noun 'with' noun -> Pick;

Extend only 'pull'
  * noun 'with' noun -> Pull;

Extend only 'put' first
  * noun 'over' noun -> PutOn
  * 'out' noun -> Extinguish
  * noun 'out' -> Extinguish;

Extend 'read' replace
  * noun -> Read
  * 'about' topic 'in' noun -> Consult reverse
  * topic 'in' noun -> Consult reverse;

Extend 'remove'
  * noun 'with' held -> Remove;

Extend only 'say' first
  * topic -> Say;

Extend only 'speak' replace
  * -> Talk
  * creature -> Talk
  * noun -> Talk
  * 'to'/'with' creature -> Talk
  * 'to'/'with' noun -> Talk
  * 'to'/'with' creature 'about' topic -> Ask
  * 'to'/'with' noun 'about' topic -> Ask;

Extend only 'take' first
  * noun 'with' held -> Take;

Extend only 'turn'
  * 'over' noun -> Turn
  * noun 'over' -> Turn
  * noun 'upside' 'down' -> Turn;

Extend 'unlock' first
  * noun -> Unlock;

Verb meta 'about' 'info'
  * -> About;

Verb 'chew' = 'eat';

Verb 'count'
  * noun -> Count;

Verb meta 'credits'
  * -> Credits;

Verb 'draw' 'sketch'
  * noun -> Draw
  * noun 'with' noun -> Draw;

Verb 'extinguish' 'douse' 'unlight'
  * noun -> Extinguish;

Verb 'dance'
  * -> Dance;

Verb 'fire'
  * held -> Fire
  * held 'at' noun -> Shoot reverse
  * 'at' noun 'with' held -> Shoot;

Verb meta 'help' 'instructions'
  * -> Help;

Verb 'hint' 'clue'
  * -> Hint;

Verb 'inspect' = 'examine';

Verb 'kick' = 'attack';

Verb 'knock' 'bang' 'rap' 'ring' 'tap'
  * 'at'/'on' noun -> Attack
  * noun -> Attack;

Verb 'load'
  * noun -> Load
  * noun 'with' held -> Load;

Verb 'pour'
  * noun -> Pour
  * 'out' noun -> Pour
  * noun 'out' -> Pour
  * noun 'in'/'into'/'inside'/'on'/'onto'/'to' noun -> PourT
  * noun 'from' noun -> Pour
  * noun 'out' 'of' noun -> Pour;

Verb 'shake' = 'wave';

Verb 'shoot'
  * -> Shoot
  * noun -> Shoot
  * noun 'with' held -> Shoot
  * 'at' noun -> Shoot
  * 'at' noun 'with' held -> Shoot
  * held 'at' noun -> Shoot reverse;

Verb 'slide'
  * noun -> Slide
  * noun 'open' -> Unlock
  * 'open'noun  -> Unlock
  * noun 'closed' -> Lock
  * 'closed' noun -> Lock
  * 'down' noun -> Enter;

Verb 'stab' = 'attack';

Verb 'strike' = 'burn';

Verb 'talk' 'babble' 'chat' 'communicate' 'converse' 'gab' 'gossip'
  * -> Talk
  * creature -> Talk
  * noun -> Talk
  * 'to'/'with' creature -> Talk
  * 'to'/'with' noun -> Talk
  * 'to'/'with' creature 'about' topic -> Ask
  * 'to'/'with' noun 'about' topic -> Ask;

Verb 'use'
  * noun -> Use;

Verb 'write' 'scribe' 'scratch'
!  * topic -> Write
  * topic 'on'/'onto' noun -> Write;

Verb 'xyzzy' 'plover' 'plugh' 'yoho'
  * -> MagicWord;

!========================================
! Actions
!========================================
[ AboutSub;
  print "This game is an enhanced version of the unfinished Italian adventure 'Serie Misteri: Sorsi di Terrore'. It was to be published by Edizioni Hobby S.r.l. on the cover tape of 'Viking', no. 12, but the magazine was cancelled before the game was finished.^^The game's original article, map and design notes were stored in the archives of Bonaventura Di Bello for many years and eventually scanned by Marco Vallarino. We now know that the concept was proposed by a friend of a collaborator to the publishing house. The collaborator later died in a motorcycle accident, so we haven't been able to identify the original designer.^^The original article and map were translated to English by Garry Francis and the hand-written design notes were translated to English by Gianluca Girelli. These were used as the basis for a new design, together with a lot of imagination to fill in the gaps and create the story. The coding was done using Inform 6 and the PunyInform library.^^";
  <<Credits>>;
];

[ AscendSub;
  <<Go FAKE_U_OBJ>>;
];

[ AskAboutSub x count npc;
  objectloop (x in location && x has animate && x ~= player)
  {
    count++;
    npc = x;
  }
  if (count == 0)
    "There's no one here to answer your questions.";
  if (count == 1)
    <<Ask npc noun>>;
  "As there is more than one animate creature here, you'll have to specify who to ask, e.g. ASK MAN ABOUT DOG.";
];

[ CountSub;
  if (ObjectIsUntouchable(noun))
    return;
  if (noun has pluralname)
    "There's more than one.";
  "There's only one.";
];

[ CreditsSub;
  "Concept by unknown author.^Restoration of original design notes by Bonaventura Di Bello and Marco Vallarino.^English translation of original design notes by Garry Francis and Gianluca Girelli.^Game design and coding by Garry Francis.^Play testing by AM Ruf, Charles Moore Jr, Dark Star, Dave Hall, Gianluca Girelli, Jade J Aincioa, Melendwyr and Robert Eggleston.^^Thanks to Bonaventura, Marco, Gianluca and the fantastic test team for their support and feedback during this project.";
];

[ DanceSub;
  "You never really liked dancing, so now is not the time to start.";
];

[ DescendSub;
  <<Go FAKE_D_OBJ>>;
];

[ DrawSub;
  if (noun == nothing)
    "What do you want to draw?";
  if (ObjectIsUntouchable(noun))
    return;
  "Your artistic skills aren't good enough to draw ", (ThatOrThose)noun, ".";
];

[ ExtinguishSub;
  if (ObjectIsUntouchable(noun))
    return;
  "You can't extinguish ", (ThatOrThose)noun, ".";
];

[ FireSub;
  if (ObjectIsUntouchable(noun))
    return;
  "You'll have to tell me what to fire at.";
];

[ HelpSub;
  "Tell me what to do using simple commands starting with a verb.^^Use LOOK (or L) to refresh the location description. Identify all the objects in the description and EXAMINE (or X) each one. Read responses carefully for hints.^^Use compass directions (N, S, E, W, NE, NW, SE, SW, U and D) to move around. Draw a map as you go.^^Use GET or TAKE to take objects and DROP to drop them again. Use WEAR to wear things like clothing and REMOVE to remove anything that's currently worn. Use INVENTORY (or I) to see what you're carrying and wearing.^^Use AGAIN (or G) to repeat the last command.^^Use UNDO to undo the last command if you make a mistake or get killed.^^Use SAVE to save the game and RESTORE to restore it again.^^There are over 100 verbs that you can use, so if something doesn't work, try a different verb or a different way of doing things. Use HINT if you get stuck.^^For full instructions, see the game page at <https://warrigal.itch.io/taste-of-terror>.";
];

[ HintSub;
  if (pins in doll)
  {
    print "You need to get rid of that pain in your back. ";
    if (cupboard hasnt general)
      print_ret (string)LOOK_IN_KITCHEN_CUPBOARD;
    if (tablet notin nothing)
      "Try chewing a painkiller.";
    print "Well, the painkiller didn't work. ";
    if (backpack in nothing && backpack hasnt general)
    {
      give backpack general;
      "You had a backpack on the train. Where did you leave it?";
    }
    if (backpack in nothing)
      "Look under your bed.";
    if (doll hasnt general)
      print_ret (string)EXAMINE_THE, "doll.";
    "Remove the pins from the doll.";
  }
  if (location == thedark)
  {
    if (real_location == room05)
      print_ret (string)OPEN_THE, "curtain.";
    print "You need a light source to see in the dark. ";
    if (matchbox hasnt moved)
      print_ret (string)LOOK_IN_KITCHEN_CUPBOARD;
    if (~~TestScope(matchbox))
      "Where did you leave the matchbox?";
    print "Light a match, then ";
    if (~~TestScope(torch))
      "find a more permanent light source.";
    else
      "light the torch.";
  }
  if (AfterRoutines())
    return;
  "Examine everything you find and draw a map.";
];

[ LoadSub;
  if (ObjectIsUntouchable(noun))
    return;
  "That would be a neat trick.";
];

[ LockSub k;
  if (ObjectIsUntouchable(noun))
    return;
  if (noun hasnt lockable)
  {
    PrintMsg(MSG_LOCK_NOT_A_LOCK, 'lock');
    rtrue;
  }
  if (noun has locked)
  {
    PrintMsg(MSG_LOCK_ALREADY_LOCKED);
    rtrue;
  }
  if (noun has open)
  {
    PrintMsg(MSG_LOCK_CLOSE_FIRST);
    rtrue;
  }
  k = RunRoutines(noun, with_key);
  if (k == nothing)
    "You can't see how to lock ", (ItOrThem)noun, ".";
  if (second == nothing && k ~= nothing && k in player)
  {
    second = k;
    print "(with ", (the)second, ")^";
  }
  if (second == nothing)
    "You don't have the key.";
  if (second ~= k)
  {
    PrintMsg(MSG_LOCK_KEY_DOESNT_FIT);
    rtrue;
  }
  give noun locked;
  run_after_routines_msg = MSG_LOCK_DEFAULT;
  run_after_routines_arg_1 = 'lock';
];

[ LookUnderSub;
  if (location == thedark)
    "But it's dark.";
  "You find nothing of interest.";
];

[ MagicWordSub;
  "A misty image of your Aunt Clarissa appears. ~You won't get anywhere using antiquated magic words. Use the spells in my spell book.~ With that, the image fades.";
];

[ PickSub;
  if (ObjectIsUntouchable(noun))
    return;
  "You can't pick that.";
];

[ PourSub;
  if (ObjectIsUntouchable(noun))
    return;
  if (parent(noun) hasnt container)
    "You can't pour ", (ThatOrThose)noun, ".";
  <<Empty (parent(noun))>>;
];

[ PourTSub;
  if (ObjectIsUntouchable(noun))
    return;
  if (parent(noun) hasnt container)
    "You can't pour ", (ThatOrThose)noun, ".";
  if (ObjectIsUntouchable(second))
    return;
  <<EmptyT (parent(noun)) second>>;
];

[ ReadSub;
  if (ObjectIsUntouchable(noun, true))
    "I suppose you read tea leaves, too.";
  "There's nothing legible on ", (ThatOrThose)noun, ".";
];

[ SaySub i;
  if (consult_words == 0)
    "You have nothing to say.";
  print "~";
  i = consult_from;
  print (firstConsultWord)i++;
  while (i < consult_from + consult_words)
    print " ", (consultWord)i++;
  print ".~^^";
  wn = consult_from;
  if (consult_words == 1 && NextWord() == 'xyzzy' or 'plover' or 'plugh' or 'yoho')
    <<MagicWord>>;
  if (AfterRoutines())
    return;
  "Nothing happens.";
];

[ ShootSub;
  if (noun == nothing)
    "You point your finger in the air and say, ~Bang!~";
  if (ObjectIsUntouchable(noun))
    return;
  "You can't just go around shooting anything.";
];

[ SlideSub;
  if (ObjectIsUntouchable(noun))
    return;
  "You can't slide ", (ThatOrThose)noun, ".";
];

[ TalkSub;
  if (noun == nothing)
    "You start talking to no one in particular.";
  if (noun == player)
    "You start talking to yourself, but it's a one-sided conversation.";
  if (RunLife(noun, ##Talk))
    rtrue;
  print_ret (The)noun, " ", (IsOrAre)noun, " not very talkative.";
];

[ UnlockSub k;
  if (ObjectIsUntouchable(noun))
    return;
  if (noun hasnt lockable)
  {
    PrintMsg(MSG_UNLOCK_NOT_A_LOCK, 'unlock');
    rtrue;
  }
  if (noun hasnt locked)
  {
    PrintMsg(MSG_UNLOCK_ALREADY_UNLOCKED, 'unlock');
    rtrue;
  }
  k = RunRoutines(noun, with_key);
  if (k == nothing)
    "You can't see how to unlock ", (ItOrThem)noun, ".";
  if (second == nothing && k ~= nothing && k in player)
  {
    second = k;
    print "(with ", (the)second, ")^";
  }
  if (second == nothing)
    "You don't have the key.";
  if (second ~= k)
  {
    PrintMsg(MSG_UNLOCK_KEY_DOESNT_FIT);
    rtrue;
  }
  give noun ~locked;
  run_after_routines_msg = MSG_UNLOCK_DEFAULT;
  run_after_routines_arg_1 = 'unlock';
];

[ UseSub;
  if (ObjectIsUntouchable(noun))
    return;
  "You'll have to be more explicit than that.";
];

[ WriteSub;
  if (~~TestScope(parchment))
    "There's nothing to write on.";
  if (quill notin player)
    "You have nothing to write with.";
  if (~~TestScope(raven))
    "You don't have anything to use as ink.";
  if (AfterRoutines())
    return;
  "You don't know what to write.";
];

End;
